<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>你想了解的「SpringCloud」都在这里</title>
      <link href="/2019/06/09/ni-xiang-liao-jie-de-springcloud-du-zai-zhe-li/"/>
      <url>/2019/06/09/ni-xiang-liao-jie-de-springcloud-du-zai-zhe-li/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/7896890-1bb9ab18d3b811d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><blockquote><p><strong>前言：</strong> 之前我们已经了解了<a href="https://www.jianshu.com/p/5368af76a0f8" target="_blank" rel="noopener">「什么是微服务？」</a>，现在我们开始了解「微服务」关键字下比较热门的「Spring Cloud」…</p></blockquote><h1 id="一、传统架构发展史"><a href="#一、传统架构发展史" class="headerlink" title="一、传统架构发展史"></a>一、传统架构发展史</h1><hr><blockquote><p>部分引用自：<a href="http://www.ityouknow.com/springcloud/2017/11/02/framework-and-springcloud.html" target="_blank" rel="noopener">从架构演进的角度聊聊Spring Cloud都做了些什么？ - 纯洁的微笑</a></p></blockquote><h2 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h2><p>单体架构在小微企业比较常见，典型代表就是一个应用、一个数据库、一个web容器就可以跑起来。</p><p>在两种情况下可能会选择单体架构：一是在企业发展的初期，为了保证快速上线，采用此种方案较为简单灵活；二是传统企业中垂直度较高，访问压力较小的业务。在这种模式下对技术要求较低，方便各层次开发人员接手，也能满足客户需求。</p><p>下面是单体架构的架构图：</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-97c4c079986d5325.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在单体架构中，技术选型非常灵活，优先满足快速上线的要求，也便于快速跟进市场。</p><h2 id="垂直架构"><a href="#垂直架构" class="headerlink" title="垂直架构"></a>垂直架构</h2><p>在单体架构发展一段时间后，公司的业务模式得到了认可，交易量也慢慢的大起来，这时候有些企业为了应对更大的流量，就会对原有的业务进行拆分，比如说：后台系统、前端系统、交易系统等。</p><p>在这一阶段往往会将系统分为不同的层级，每个层级有对应的职责，UI层负责和用户进行交互、业务逻辑层负责具体的业务功能、数据库层负责和上层进行数据交换和存储。</p><p>下面是垂直架构的架构图：</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-bed88a6d69bf4346.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="服务化架构"><a href="#服务化架构" class="headerlink" title="服务化架构"></a>服务化架构</h2><p>如果公司进一步的做大，垂直子系统会变的越来越多，系统和系统之间的调用关系呈指数上升的趋势。在这样的背景下，很多公司都会考虑服务的 SOA 化。<strong>SOA 代表面向服务的架构，将应用程序根据不同的职责划分为不同的模块</strong>，不同的模块直接通过特定的协议和接口进行交互。这样使整个系统切分成很多单个组件服务来完成请求，当流量过大时通过水平扩展相应的组件来支撑，所有的组件通过交互来满足整体的业务需求。</p><p>SOA服务化的优点是，它可以根据需求通过网络对松散耦合的粗粒度应用组件进行分布式部署、组合和使用。服务层是SOA的基础，可以直接被应用调用，从而有效控制系统中与软件代理交互的人为依赖性。</p><p>服务化架构是一套松耦合的架构，服务的拆分原则是服务内部高内聚，服务之间低耦合。</p><p>下面是服务化架构图：</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-9d1b9a96a112b4b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在这个阶段可以使用 WebService 或者 Dubbo 来服务治理。</p><p>我们发现从单体架构到服务化架构，应用数量都在不断的增加，慢慢的下沉的就成了基础组建，上浮的就成为业务系统。从上述也可以看出<strong>架构的本质就是不断的拆分重构</strong>：分的过程是把系统拆分为各个子系统/模块/组件，拆的时候，首先要解决每个组件的定位问题，然后才能划分彼此的边界，实现合理的拆分。合就是根据最终要求，把各个分离的组件有机整合在一起。拆分的结果使开发人员能够做到业务聚焦、技能聚焦，实现开发敏捷，合的结果是系统变得柔性，可以因需而变，实现业务敏捷。</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p><strong>微服务是一种软件架构风格，它是以专注于单一责任与功能的小型功能区块为基础</strong>，利用模组化的方式组合出复杂的大型应用程序，各功能区块使用与语言无关的 API（例如 REST）集相互通讯，且每个服务可以被单独部署，它具备以下三个核心特点：</p><ul><li><strong>微服务为大型系统而生。</strong>随着业务的快速增长，会带来系统流量压力和复杂度的上升，系统的可维护性和可扩展性成为架构设计的主要考虑因素，微服务架构设计理念通过小而美的业务拆分，通过分而自治来实现复杂系统的优雅设计实现。</li><li><strong>微服务架构是面向结果的。</strong>微服务架构设计风格的产生并非是出于学术或为标准而标准的设计，而是在软件架构设计领域不断演进过程中，面对实际工业界所遇到问题，而出现的面向解决实际问题的架构设计风格。</li><li><strong>专注于服务的可替代性来设计。</strong>微服务架构设计风格核心要解决的问题之一便是如何便利地在大型系统中进行系统组件的维护和替换，且不影响整体系统稳定性。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/7896890-edd16c96b17343b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>SOA</strong> 与 <strong>微服务</strong> 的不同在于：</p><ul><li><strong>服务拆分粒度更细。</strong>微服务可以说是更细维度的服务化，小到一个子子模块，只要该模块依赖的资源与其他模块都没有关系，那么就可以拆分成一个微服务。</li><li><strong>服务独立部署。</strong>每个服务都严格遵循独立打包部署的准则，互不影响。比如一台物理机上可以部署多个 Docker 实例，每个 Docker 实例可以部署一个微服务的代码。</li><li><strong>服务独立维护。</strong>每个微服务都可以交由一个小团队甚至个人来开发、测试、发布和运维，并对整个生命周期负责。</li><li><strong>服务治理能力要求高。</strong>因为拆分为微服务之后，服务的数量变多，因此需要有统一的服务治理平台，来对各个服务进行管理。</li></ul><h1 id="二、引入-Spring-Cloud"><a href="#二、引入-Spring-Cloud" class="headerlink" title="二、引入 Spring Cloud"></a>二、引入 Spring Cloud</h1><hr><h2 id="什么是-Spring-Cloud"><a href="#什么是-Spring-Cloud" class="headerlink" title="什么是 Spring Cloud?"></a>什么是 Spring Cloud?</h2><p>Spring 全家桶在 Java 开发中拥有举足轻重的地位，其中的一系列产品不仅仅大大简化和方便了 Java 的开发，其中的 AOP 和 IoC 等一系列的理念也深刻地影响着 Java 程序员们。</p><p>Spring 全家桶产品众多，总结起来大概就是：</p><ul><li><strong>Spring</strong> 通常指 Spring IOC。</li><li><strong>Spring Framework</strong> 包含了 Spring IOC，同时包含了 Spring AOP，并实现与其它 J2EE 框架的整合。</li><li><strong>Spring Boot</strong> 是对 Spring Framework 的补充，让框架的集成变得更简单，致力于快速开发 独立的 Spring 应用。</li><li><strong>Spring Cloud</strong> 是基于 Spring Boot 设计的一套微服务规范，并增强了应用上下文。</li></ul><p>我们也不妨来看看官网的介绍：</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-3267323e6d3b94bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>总结起来就是： Spring Cloud 是一系列框架的有序集合。</strong>我们能够使用基于 Spring Boot 设计的 Spring Cloud 方便快速的搭建起自己的可靠、协调一致的分布式系统。</p><h2 id="为什么是-Spring-Cloud？"><a href="#为什么是-Spring-Cloud？" class="headerlink" title="为什么是 Spring Cloud？"></a>为什么是 Spring Cloud？</h2><p>微服务的框架那么多比如：Dubbo、Kubernetes，为什么就要使用 Spring Cloud 的呢？</p><ul><li>产出于 Spring 大家族，Spring 在企业级开发框架中无人能敌，来头很大，可以保证后续的更新、完善。比如 Dubbo 现在就差不多死了</li><li>有 Spring Boot 这个独立干将可以省很多事，大大小小的活 Spring Boot 都搞的挺不错。</li><li>作为一个微服务治理的大家伙，考虑的很全面，几乎服务治理的方方面面都考虑到了，方便开发开箱即用。</li><li>Spring Cloud 活跃度很高，教程很丰富，遇到问题很容易找到解决方案。</li><li>轻轻松松几行代码就完成了熔断、均衡负载、服务中心的各种平台功能。</li></ul><h1 id="三、Spring-Cloud-能够帮我们做什么？"><a href="#三、Spring-Cloud-能够帮我们做什么？" class="headerlink" title="三、Spring Cloud 能够帮我们做什么？"></a>三、Spring Cloud 能够帮我们做什么？</h1><hr><p>前面我们说到了，「Spring Cloud」是一系列框架的集合，可以帮助我们解决分布式/微服务的各种问题，那么「Spring Cloud」究竟能帮助我们做什么呢？</p><p>SpringCloud的基础功能包括：</p><ul><li><strong>服务治理：</strong> Spring  Cloud Eureka</li><li><strong>客户端负载均衡：</strong> Spring Cloud Ribbon</li><li><strong>服务容错保护：</strong> Spring  Cloud Hystrix</li><li><strong>声明式服务调用：</strong> Spring  Cloud Feign</li><li><strong>API网关服务：</strong> Spring Cloud Zuul</li><li><strong>分布式配置中心：</strong> Spring Cloud Config</li></ul><p>当然 Spring Cloud 还包括一些高级的功能：</p><ul><li><strong>消息总线：</strong> Spring Cloud Bus</li><li><strong>消息驱动的微服务：</strong> Spring Cloud Stream</li><li><strong>分布式服务跟踪：</strong> Spring Cloud Sleuth</li></ul><h2 id="服务治理：Eureka"><a href="#服务治理：Eureka" class="headerlink" title="服务治理：Eureka"></a>服务治理：Eureka</h2><p>微服务很重要的一点就是「无状态」，也就是说每一个服务之间应该是独立的，所以当微服务架构搭起来之后各个独立的「微服务」之间应该如何<strong>通讯</strong>成了首要的问题。</p><p>假设我们的 A服务 需要访问 B服务，那么我们首先需要知道对方的 <strong>ip地址</strong>，所以我们调用起来可能就像：</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-d736e62854e9f949.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>似乎并没有什么问题，但是如果 B服务 的 <strong>ip地址</strong> 变更了，那么我们就只能手动的去更改 A服务 的配置，如果我们的服务有很多，并且不止 A服务 调用了 B服务，那么手动更改这些配置将会是一场噩梦。</p><p>Eureka 是 Netflix 开源的一款提供服务注册和发现的产品，它提供了完整的 Service Registry 和 Service Discovery 实现。也是 Spring Cloud 体系中最重要最核心的组件之一。</p><p>用大白话讲，Eureka 就是一个服务中心，将所有的可以提供的服务都注册到它这里来管理，其它各调用者需要的时候去注册中心获取，然后再进行调用，避免了服务之间的直接调用，方便后续的水平扩展、故障转移等。如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-44cc612bd6a8a064.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>当然服务中心这么重要的组件一但挂掉将会影响全部服务，因此需要搭建 Eureka 集群来保持高可用性，生产中建议最少两台。随着系统的流量不断增加，需要根据情况来扩展某个服务，Eureka 内部已经提供均衡负载的功能，只需要增加相应的服务端实例既可。那么在系统的运行期间某个实例挂了怎么办？<strong>Eureka 内容有一个心跳检测机制，</strong> 如果某个实例在规定的时间内没有进行通讯则会自动被剔除掉，避免了某个实例挂掉而影响服务。</p><p>因此使用了Eureka就自动具有了注册中心、负载均衡、故障转移的功能。如果想对Eureka进一步了解可以参考这篇文章：<a href="http://www.ityouknow.com/springcloud/2017/05/10/springcloud-eureka.html" target="_blank" rel="noopener">注册中心Eureka</a></p><h2 id="客户端负载均衡：-Ribbon"><a href="#客户端负载均衡：-Ribbon" class="headerlink" title="客户端负载均衡： Ribbon"></a>客户端负载均衡： Ribbon</h2><p>Ribbon 是一个基于 HTTP 和 TCP 客户端的负载均衡器。Ribbon 可以在通过客户端中配置的 ribbonServerList 服务端列表去<strong>轮询访问</strong>以达到均衡负载的作用。</p><p>当 Ribbon 与 Eureka 联合使用时，ribbonServerList 会被 DiscoveryEnabledNIWSServerList 重写，扩展成<strong>从 Eureka 注册中心中获取服务端列表。</strong>同时它也会用 NIWSDiscoveryPing 来取代 IPing，<strong>它将职责委托给 Eureka 来确定服务端是否已经启动。</strong></p><ul><li>实战：</li></ul><p><a href="http://blog.didispace.com/springcloud2/" target="_blank" rel="noopener">Spring Cloud构建微服务架构（二）服务消费者 - http://blog.didispace.com/springcloud2/</a></p><h2 id="服务容错保护：-Hystrix"><a href="#服务容错保护：-Hystrix" class="headerlink" title="服务容错保护： Hystrix"></a>服务容错保护： Hystrix</h2><p>在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为<strong>服务雪崩效应。</strong>服务雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。</p><p>如下图所示：A作为服务提供者，B为A的服务消费者，C和D是B的服务消费者。A不可用引起了B的不可用，并将不可用像滚雪球一样放大到C和D时，雪崩效应就形成了。</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-2c62b2ffa85e86e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在这种情况下就需要整个服务机构具有<strong>故障隔离</strong>的功能，避免某一个服务挂掉影响全局。在 Spring Cloud 中 Hystrix 组件就扮演这个角色。</p><p>Hystrix 会在某个服务连续调用 N 次不响应的情况下，立即通知调用端调用失败，避免调用端持续等待而影响了整体服务。Hystrix 间隔时间会再次检查此服务，如果服务恢复将继续提供服务。</p><p>继续了解Hystrix可以参考：<a href="http://www.ityouknow.com/springcloud/2017/05/10/springcloud-eureka.html" target="_blank" rel="noopener">熔断器Hystrix</a></p><h2 id="Hystrix-Dashboard-和-Turbine"><a href="#Hystrix-Dashboard-和-Turbine" class="headerlink" title="Hystrix Dashboard 和 Turbine"></a>Hystrix Dashboard 和 Turbine</h2><p>当熔断发生的时候需要迅速的响应来解决问题，避免故障进一步扩散，那么对熔断的监控就变得非常重要。熔断的监控现在有两款工具：Hystrix-dashboard 和 Turbine</p><p>Hystrix-dashboard 是一款针对Hystrix进行实时监控的工具，通过 Hystrix Dashboard 我们可以直观地看到各 Hystrix Command 的请求响应时间, 请求成功率等数据。但是只使用 Hystrix Dashboard 的话, 你只能看到单个应用内的服务信息, 这明显不够. 我们需要一个工具能让我们汇总系统内多个服务的数据并显示到 Hystrix Dashboard 上, 这个工具就是 Turbine. 监控的效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-de80387262f335c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>想了解具体都监控了哪些指标，以及如何监控可以参考这篇文章：<a href="http://www.ityouknow.com/springcloud/2017/05/18/hystrix-dashboard-turbine.html" target="_blank" rel="noopener">熔断监控Hystrix Dashboard和Turbine</a></p><h2 id="声明式服务调用：Feign"><a href="#声明式服务调用：Feign" class="headerlink" title="声明式服务调用：Feign"></a>声明式服务调用：Feign</h2><p>上面我们介绍了 Ribbon 和 Hystrix 了，可以发现：这两个可以作为基础工具类广泛的嵌入到各个微服务中。为了<strong>简化我们的开发</strong>，Spring Cloud Feign 出现了！它基于 Netflix Feign 实现，整合了 Spring Cloud Ribbon 与 Spring Cloud Hystrix,  除了整合这两者的强大功能之外，它还提供了<strong>声明式的服务调用</strong>(不再通过RestTemplate)。</p><blockquote><p>Feign 是一种声明式、模板化的HTTP客户端。在 Spring Cloud 中使用 Feign, 我们可以做到使用HTTP请求远程服务时能与调用本地方法一样的编码体验，开发者完全感知不到这是远程方法，更感知不到这是个 HTTP 请求。</p></blockquote><p>下面就简单看看Feign是怎么优雅地实现远程调用的：</p><p><strong>服务绑定：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// value --->指定调用哪个服务</span><span class="token comment" spellcheck="true">// fallbackFactory--->熔断器的降级提示</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"MICROSERVICECLOUD-DEPT"</span><span class="token punctuation">,</span> fallbackFactory <span class="token operator">=</span> DeptClientServiceFallbackFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptClientService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 采用Feign我们可以使用SpringMVC的注解来对服务进行绑定！</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/dept/get/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> Dept <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/dept/list"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/dept/add"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>Feign 中使用熔断器：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Feign中使用断路器 * 这里主要是处理异常出错的情况(降级/熔断时服务不可用，fallback就会找到这里来) */</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">// 不要忘记添加，不要忘记添加</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptClientServiceFallbackFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token operator">&lt;</span>DeptClientService<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> DeptClientService <span class="token function">create</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DeptClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Dept <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDeptno</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDname</span><span class="token punctuation">(</span><span class="token string">"该ID："</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"没有没有对应的信息,Consumer客户端提供的降级信息,此刻服务Provider已经关闭"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setDb_source</span><span class="token punctuation">(</span><span class="token string">"no this database in MySQL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>调用：</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-151920f51a61863b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><ul><li>引用自：<br><a href="https://juejin.im/post/5b83466b6fb9a019b421cecc#heading-12" target="_blank" rel="noopener">外行人都能看懂的 Spring Cloud - https://juejin.im/post/5b83466b6fb9a019b421cecc#heading-12</a></li></ul><h2 id="API-网关服务：Zuul"><a href="#API-网关服务：Zuul" class="headerlink" title="API 网关服务：Zuul"></a>API 网关服务：Zuul</h2><p>在微服务架构模式下，<strong>后端服务的实例数一般是动态的，</strong>对于客户端而言很难发现动态改变的服务实例的访问地址信息。因此在基于微服务的项目中为了简化前端的调用逻辑，通常会引入 API Gateway 作为轻量级网关，同时 API Gateway 中也会实现相关的认证逻辑从而简化内部服务之间相互调用的复杂度。</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-e3e021be95edbf77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Spring Cloud 体系中支持 API Gateway 落地的技术就是 Zuul。Spring Cloud Zuul 路由是微服务架构中不可或缺的一部分，提供动态路由，监控，弹性，安全等的边缘服务。Zuul 是 Netflix 出品的一个基于 JVM 路由和服务端的负载均衡器。</p><p>它的具体作用就是<strong>服务转发，接收并转发所有内外部的客户端调用。</strong>使用 Zuul 可以作为资源的统一访问入口，同时也可以在网关做一些权限校验等类似的功能。</p><p>具体使用参考这篇文章：<a href="http://www.ityouknow.com/springcloud/2017/06/01/gateway-service-zuul.html" target="_blank" rel="noopener">服务网关zuul</a></p><h2 id="分布式配置中心：Config"><a href="#分布式配置中心：Config" class="headerlink" title="分布式配置中心：Config"></a>分布式配置中心：Config</h2><p>随着业务的不断发展，我们的「微服务」可能会越来越多，而<strong>每一个微服务都会有自己的配置文件，</strong>在研发过程中有测试环境、UAT环境、生产环境，因此每个微服务又对应至少三个不同环境的配置文件。这么多的配置文件，如果需要修改某个公共服务的配置信息，如：缓存、数据库等，难免会产生混乱，这个时候就需要引入 Spring Cloud 另外一个组件：Spring Cloud Config。</p><p><strong>Spring Cloud Config 是一个解决分布式系统的配置管理方案。</strong>它包含了 Client 和 Server 两个部分，Server 提供配置文件的存储、以接口的形式将配置文件的内容提供出去，Client 通过接口获取数据、并依据此数据初始化自己的应用。</p><p>其实就是 Server 端将所有的配置文件服务化，需要配置文件的服务实例去 Config Server 获取对应的数据。<strong>将所有的配置文件统一整理，避免了配置文件碎片化。</strong>配置中心git实例参考：<a href="http://www.ityouknow.com/springcloud/2017/05/22/springcloud-config-git.html" target="_blank" rel="noopener">配置中心git示例</a>；</p><p>如果服务运行期间改变配置文件，服务是不会得到最新的配置信息，需要解决这个问题就需要引入 Refresh。可以在服务的运行期间重新加载配置文件，具体可以参考这篇文章：<a href="http://www.ityouknow.com/springcloud/2017/05/23/springcloud-config-svn-refresh.html" target="_blank" rel="noopener">配置中心svn示例和refresh</a></p><p>当所有的配置文件都存储在配置中心的时候，配置中心就成为了一个非常重要的组件。<strong>如果配置中心出现问题将会导致灾难性的后果，因此在生产中建议对配置中心做集群，来支持配置中心高可用性。</strong>具体参考：<a href="http://www.ityouknow.com/springcloud/2017/05/25/springcloud-config-eureka.html" target="_blank" rel="noopener">配置中心服务化和高可用</a></p><h2 id="消息总线：Bus"><a href="#消息总线：Bus" class="headerlink" title="消息总线：Bus"></a>消息总线：Bus</h2><p>上面的 Refresh 方案虽然可以解决单个微服务运行期间重载配置信息的问题，但是在真正的实践生产中，可能会有 N 多的服务需要更新配置，如果每次依靠手动 Refresh 将是一个巨大的工作量，这时候 Spring Cloud 提出了另外一个解决方案：Spring Cloud Bus</p><p><strong>Spring Cloud Bus 通过轻量消息代理连接各个分布的节点。</strong>这会用在<strong>广播状态</strong>的变化（例如配置变化）或者其它的消息指令中。Spring Cloud Bus 的一个核心思想是<strong>通过分布式的启动器对Spring Boot应用进行扩展，也可以用来建立一个或多个应用之间的通信频道。</strong>目前唯一实现的方式是用 AMQP 消息代理作为通道。</p><p>Spring Cloud Bus 是轻量级的通讯组件，也可以用在其它类似的场景中。有了 Spring Cloud Bus 之后，当我们改变配置文件提交到版本库中时，会自动的触发对应实例的 Refresh，具体的工作流程如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-ff35d8cb86a33733.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>也可以参考这篇文章来了解：<a href="http://www.ityouknow.com/springcloud/2017/05/26/springcloud-config-eureka-bus.html" target="_blank" rel="noopener">配置中心和消息总线</a></p><h2 id="消息驱动的微服务：Stream"><a href="#消息驱动的微服务：Stream" class="headerlink" title="消息驱动的微服务：Stream"></a>消息驱动的微服务：Stream</h2><p>Spring Cloud Stream 是一个用来为微服务应用构建消息驱动能力的框架。它可以基于 Spring Boot 来创建独立的、可用于生产的 Spring 应用程序。它通过使用 Spring Integration 来<strong>连接消息代理中间件以实现消息事件驱动的微服务应用。</strong></p><p>下图是官方文档中对于 Spring Cloud Stream 应用模型的结构图。从中我们可以看到，Spring Cloud Stream 构建的应用程序与消息中间件之间是通过绑定器 Binder 相关联的，绑定器对于应用程序而言起到了隔离作用，它使得不同消息中间件的实现细节对应用程序来说是透明的。所以对于每一个 Spring Cloud Stream 的应用程序来说，它不需要知晓消息中间件的通信细节，它只需要知道 Binder 对应用程序提供的概念去实现即可。如下图案例，在应用程序和 Binder 之间定义了两条输入通道和三条输出通道来传递消息，而绑定器则是作为这些通道和消息中间件之间的桥梁进行通信。</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-07f3ff1255dfc531.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Spring Cloud Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，并且引入了发布-订阅、消费组以及消息分区这三个核心概念。简单的说，<strong>Spring Cloud Stream 本质上就是整合了 Spring Boot 和 Spring Integration，实现了一套轻量级的消息驱动的微服务框架。</strong>通过使用 Spring Cloud Stream，可以有效地简化开发人员对消息中间件的使用复杂度，让系统开发人员可以有更多的精力关注于核心业务逻辑的处理。由于 Spring Cloud Stream 基于 Spring Boot 实现，所以它秉承了 Spring Boot 的优点，实现了自动化配置的功能帮忙我们可以快速的上手使用，但是目前为止 Spring Cloud Stream 只支持 <strong>RabbitMQ</strong> 和 <strong>Kafka</strong> 两个著名的消息中间件的自动化配置：</p><ul><li>实战：<br><a href="http://blog.didispace.com/spring-cloud-starter-dalston-7-1/" target="_blank" rel="noopener">Spring Cloud构建微服务架构：消息驱动的微服务（入门）【Dalston版】 - http://blog.didispace.com/spring-cloud-starter-dalston-7-1/</a></li></ul><h2 id="分布式服务跟踪：Sleuth"><a href="#分布式服务跟踪：Sleuth" class="headerlink" title="分布式服务跟踪：Sleuth"></a>分布式服务跟踪：Sleuth</h2><p>随着服务的越来越多，对调用链的分析会越来越复杂，如服务之间的调用关系、某个请求对应的调用链、调用之间消费的时间等，<strong>对这些信息进行监控就成为一个问题。</strong>在实际的使用中我们需要监控服务和服务之间通讯的各项指标，这些数据将是我们改进系统架构的主要依据。因此分布式的链路跟踪就变的非常重要，Spring Cloud 也给出了具体的解决方案：Spring Cloud Sleuth 和 Zipkin</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-c68c2ef12cd4adae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Spring Cloud Sleuth 为服务之间调用提供链路追踪。通过 Sleuth 可以很清楚的了解到一个服务请求经过了哪些服务，每个服务处理花费了多长时间。从而让我们可以很方便的理清各微服务间的调用关系。</p><p>Zipkin 是 Twitter 的一个开源项目，允许开发者收集 Twitter 各个服务上的监控数据，并提供查询接口</p><p>分布式链路跟踪需要 Sleuth + Zipkin 结合来实现，具体操作参考这篇文章：<a href="http://www.jianshu.com/p/c3d191663279" target="_blank" rel="noopener">分布式链路跟踪(Sleuth)</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们从整体上来看一下Spring Cloud各个组件如何来配套使用：</p><p><img src="https://upload-images.jianshu.io/upload_images/7896890-eda069329a8b386d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>从上图可以看出 Spring Cloud 各个组件相互配合，合作支持了一套完整的微服务架构。</p><ul><li>其中 <strong>Eureka</strong> 负责服务的注册与发现，很好将各服务连接起来</li><li><strong>Hystrix</strong> 负责监控服务之间的调用情况，连续多次失败进行熔断保护。</li><li><strong>Hystrix dashboard,Turbine</strong> 负责监控 Hystrix 的熔断情况，并给予图形化的展示</li><li><strong>Spring Cloud Config</strong> 提供了统一的配置中心服务</li><li>当配置文件发生变化的时候，<strong>Spring Cloud Bus</strong> 负责通知各服务去获取最新的配置信息</li><li>所有对外的请求和服务，我们都通过 <strong>Zuul</strong> 来进行转发，起到 API 网关的作用</li><li>最后我们使用 <strong>Sleuth + Zipkin</strong> 将所有的请求数据记录下来，方便我们进行后续分析</li></ul><p>Spring Cloud 从设计之初就考虑了绝大多数互联网公司架构演化所需的功能，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等。这些功能都是以插拔的形式提供出来，方便我们系统架构演进的过程中，可以合理的选择需要的组件进行集成，从而在架构演进的过程中会更加平滑、顺利。</p><p>微服务架构是一种趋势，Spring Cloud 提供了标准化的、全站式的技术方案，意义可能会堪比当前 Servlet 规范的诞生，有效推进服务端软件系统技术水平的进步。</p><blockquote><p>引用自：<a href="http://www.ityouknow.com/springcloud/2017/11/02/framework-and-springcloud.html" target="_blank" rel="noopener">从架构演进的角度聊聊Spring Cloud都做了些什么？ - http://www.ityouknow.com/springcloud/2017/11/02/framework-and-springcloud.html</a></p></blockquote><h1 id="四、Spring-Cloud-版本"><a href="#四、Spring-Cloud-版本" class="headerlink" title="四、Spring Cloud 版本"></a>四、Spring Cloud 版本</h1><hr><p>刚接触的「Spring Cloud」的童鞋可能会对它的版本感到奇怪，什么 <code>Angle</code>、<code>Brixton</code>、<code>Finchley</code>，这些都是啥啊？「为什么会有这么多种看起来不同的 Spring Cloud？」</p><p>从上面我们可以知道：<strong>Spring Cloud 是一个拥有诸多子项目的大型综合项目</strong>（功能不止上面的介绍），原则上其子项目也都维护着自己的发布版本号。那么每一个Spring Cloud的版本都会包含不同的子项目版本，<strong>为了要管理每个版本的子项目清单，避免版本名与子项目的发布号混淆，所以没有采用版本号的方式，而是通过命名的方式。</strong></p><p>这些版本名字采用了伦敦地铁站的名字，<strong>根据字母表的顺序来对应版本时间顺序，</strong>比如：最早的Release版本：Angel，第二个Release版本：Brixton，以此类推……</p><p>当一个项目到达发布临界点或者解决了一个严重的 BUG 后就会发布一个 “service Release” 版本， 简称 SR（X）版本，x 代表一个递增数字。</p><ul><li>引用自：<br><a href="http://blog.didispace.com/springcloud-version/" target="_blank" rel="noopener">聊聊Spring Cloud版本的那些事儿 - http://blog.didispace.com/springcloud-version/</a></li></ul><h2 id="Spring-Cloud-amp-Spring-Boot-版本对照表"><a href="#Spring-Cloud-amp-Spring-Boot-版本对照表" class="headerlink" title="Spring Cloud &amp; Spring Boot 版本对照表"></a>Spring Cloud &amp; Spring Boot 版本对照表</h2><p>通过查阅官网：<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud</a>，我们可以看到一个「Release train Spring Boot compatibility」表：</p><table><thead><tr><th align="left"><strong>Release Train</strong></th><th align="left"><strong>Boot Version</strong></th></tr></thead><tbody><tr><td align="left">Greenwich</td><td align="left">2.1.x</td></tr><tr><td align="left">Finchley</td><td align="left">2.0.x</td></tr><tr><td align="left">Edgware</td><td align="left">1.5.x</td></tr><tr><td align="left">Dalston</td><td align="left">1.5.x</td></tr></tbody></table><p>上表可以看出，最新的「Spring Cloud」版本已经出到了 Greenwich… 每个版本都能查阅到当前版本所包含的子项目，以及子项目的版本号，我们可以通过此来决定需要选择怎么样的版本。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><hr><p><a href="https://juejin.im/post/5b83466b6fb9a019b421cecc#heading-19" target="_blank" rel="noopener">1. 外行人都能看懂的SpringCloud，错过了血亏！ - https://juejin.im/post/5b83466b6fb9a019b421cecc#heading-19</a><br><a href="http://www.ityouknow.com/springcloud/2017/11/02/framework-and-springcloud.html" target="_blank" rel="noopener">2. 从架构演进的角度聊聊Spring Cloud都做了些什么？ - http://www.ityouknow.com/springcloud/2017/11/02/framework-and-springcloud.html</a><br><a href="http://blog.didispace.com/springcloud-version/" target="_blank" rel="noopener">3. 聊聊Spring Cloud版本的那些事儿 - http://blog.didispace.com/springcloud-version/</a><br><a href="http://blog.didispace.com/spring-cloud-learning/" target="_blank" rel="noopener">4. Spring Cloud 从入门到精通 - http://blog.didispace.com/spring-cloud-learning/</a><br><a href="https://springcloud.cc/" target="_blank" rel="noopener">5. Spring Cloud 中文网 - https://springcloud.cc/</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】线程和进程基础</title>
      <link href="/2017/11/06/fan-yi-xian-cheng-he-jin-cheng-ji-chu/"/>
      <url>/2017/11/06/fan-yi-xian-cheng-he-jin-cheng-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>所有的内容均来自：<a href="http://www.qnx.com/developers/docs/6.4.1/neutrino/getting_started/s1_procs.html" target="_blank" rel="noopener">http://www.qnx.com/developers/docs/6.4.1/neutrino/getting_started/s1_procs.html</a><br>这是一篇很棒的介绍进程和线程的文章，本文属于自己感兴趣翻译过来的文章，有兴趣的读者也可以去拜读一下原文。</p></blockquote><h1 id="进程和线程基础"><a href="#进程和线程基础" class="headerlink" title="进程和线程基础"></a>进程和线程基础</h1><p>在我们开始讨论线程，进程，时间片以及各种神奇的“调度机制”之前，先来建立一个类比。</p><p>我首先要做的就是说明线程和进程是如何工作的。我能想到的最好的方式（不涉及实时系统的设计）就是把线程和进程想象成一些实际的情形。</p><h2 id="进程就像是一个房子"><a href="#进程就像是一个房子" class="headerlink" title="进程就像是一个房子"></a>进程就像是一个房子</h2><p>让我们用一个常规的、日常的物品来模拟进程和线程——房子。</p><p>房子实际上是一个容器，具有一定的属性（例如楼面面积，房间数目等等）。</p><p>如果你能这样看待，那么你就会发现房子不会自己主动去做任何事——它只是一个被动的物体。这就是进程实际上所担任的角色。我们待会儿会讨论到。</p><h2 id="线程就像居住者"><a href="#线程就像居住者" class="headerlink" title="线程就像居住者"></a>线程就像居住者</h2><p>住在房子里的人们是活跃的对象——他们使用不同的房间，看电视，做饭，洗澡等等。我们很快就会发现这就是线程的行为模式。</p><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>如果你曾经一个人生活过，那么你就会知道这是一种什么感觉——你知道，你可以在任何时候在家里做任何你想做的事，因为房子里没有其他人。如果你想打开立体声音响，使用洗手间，吃晚餐，随便你，你只要继续做就行了。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>当你把另一个人加入房子时，事情会发生戏剧性的变化。假设你结婚了，所以现在你的配偶也住在那里。你不能在任何一个特定的时间进入洗手间，你需要先检查一下，确保你的配偶不在里面！</p><p>如果你有两个负责任的成年人住在一所房子里，一般来说，你可能会对“安全”相当松懈-因为你知道另一个大人会尊重你的空间，不会试图放火烧厨房(故意！)等等。</p><p>现在，把几个孩子扔到一起，突然之间事情变得有趣多了。</p><h2 id="回到进程和线程"><a href="#回到进程和线程" class="headerlink" title="回到进程和线程"></a>回到进程和线程</h2><p>就像房子占据了房地产的一部分一样，进程也会占据一定的内存。就像房子的住户可以自由进入任何他们想要的房间一样，一个进程的线程都可以访问这个内存。如果一个线程分配了一些东西(妈妈出去买了一个游戏)，所有其他的线程都能立即访问它(因为它存在于公共地址空间-它在房子里)。同样，如果进程分配内存，那么这个新内存也可以用于所有线程。这里的技巧是，确认内存是否应该对进程中的所有线程都可用。如果是，那么您需要让所有线程同步它们对它的访问。如果不是，那么我们假设它是特定于特定线程的。在这种情况下，因为只有该线程才能访问它，所以我们可以假定不需要同步-线程不会自行启动！</p><p>正如我们从日常生活中所知道的，事情并不那么简单。现在我们已经了解了基本特性<strong>(要点：所有内容都是共享的)</strong>，让我们来看看事情变得更有趣的地方，以及为什么。</p><p>下图显示了我们将代表线程和进程的方式。进程是圆，表示“容器”概念(地址空间)，三个squigley lines（不知道是什么）是线程。你会在书中看到这样的图表。</p><p><img src="http://psxw1ax9x.bkt.clouddn.com/blog/20190627082626.png" alt></p><h2 id="相互排斥"><a href="#相互排斥" class="headerlink" title="相互排斥"></a>相互排斥</h2><p>如果你想洗个澡，而且有人已经在用浴室，你就得等着。线程是如何处理这个的？</p><p>它用的是一种叫做互斥的操作。它几乎意味着你所想的-当涉及到特定的资源时，许多线程是互斥的。</p><p>如果你正在洗澡，你想要独占浴室。要做到这一点，你通常会进入浴室并把门从里面锁起来。任何想使用浴室的人都会被锁上的。当你完成任务时，你会打开门，让其他人进入。</p><p>这就是线程所做的。线程使用一个名为互斥的对象(相互排斥的缩写)。这个对象就像门上的锁-一旦线程拥有互斥锁，没有其他线程可以获得互斥锁，直到拥有的线程释放(解锁)它。就像门锁一样，等待获得互斥锁的线程将被禁止。</p><p>互斥锁和门锁的另一个有趣的相同点是互斥锁实际上是一个“咨询”锁。如果一个线程不符合使用互斥锁的约定，那么保护就没有用了。在我们的房子比喻中，这就像有人通过墙壁闯进厕所，无视了门和锁的约定。</p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>如果浴室现在锁着，有许多人在等着使用它，那该怎么做？显然，所有的人都坐在外面，等着在浴室里的人出去。真正的问题是，“当门打开时会发生什么？谁能下一个进入？“</p><p>你会认为，让等了最长的时间得那个成为下一个是“公平的”。或者，让最年长的人成为下一个是“公平”的。或者最高的。或者最重要的。有许多方法可以确定什么是“公平”。 </p><p>我们通过线程的两个因素来解决这个问题：优先级和等待长度。 </p><p>假设两个人同时出现在(上锁的)卫生间的门前。其中一人有一个紧迫的事情(他们开会已经很晚了)，而另一个却没有。让那个时间紧迫的人下一次进去，是不是很有道理呢？当然会了。唯一的问题是你如何决定谁更“重要”。这可以通过分配优先级来完成(让我们使用一个像中微子（Neutrino）这样的数字，是最低的可用优先级，255是这个版本中的最高值)。房子里有紧迫事情的人将被给予更高的优先权，而那些不被优先考虑的人将被给予较低的优先权。 </p><p>和线程一样。线程继承其父线程的调度算法，但可以调用pthread_setschedparam()来更改其调度策略和优先级(如果它有权限这样做)。</p><p>如果有多个线程等待，并且互斥锁被解锁，我们将把互斥锁给予等待线程中最高优先级的那个。但是，假设两个人都具有相同的优先级。现在你要做什么？好吧，在这种情况下，让等待最长的人下一个或许是“公平的”。这不仅是“公平的”，而且也是在内核所做的。在一堆线程等待的情况下，我们首先是按优先级等级来决定，其次是等待长度。 </p><p>互斥量肯定不是我们将遇到的唯一的同步对象。让我们看看其他的。</p><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>让我们从浴室搬到厨房，因为这是一个在社会上可以接受同时容纳一个人以上的地点。在厨房里，你可能不想让每个人都在里面。事实上，你可能想要限制你的厨房里所能容纳的人数(太多的厨师，等等)。</p><p>假设你不想同时拥有两个以上的人。你能用互斥体来实现吗？这不是我们定义的。为什么不呢？这实际上是一个非常有趣的问题。让我们把它分成几个步骤。</p><h2 id="数量为1的信号量"><a href="#数量为1的信号量" class="headerlink" title="数量为1的信号量"></a>数量为1的信号量</h2><p>浴室可以有两种情况中的一种，两种状态相互联系（with two states that go hand-in-hand with each other）：</p><ul><li>门没有锁，房间里没有人</li><li>门是锁着的，房间里有一个人</li></ul><p>没有其他的组合是可能的-当房间里没人的时候不能上锁(不然我们怎么解锁？)，而且当有人在房间里时不能解锁(他们怎么保证他们的隐私？)。这是一个信号量的示例，其计数为1-最多只能有一个人在该房间，或者一个线程使用信号量。</p><p>这里的关键（key）(请原谅双关语)是我们描述锁的方式。在典型的浴室锁中，你可以锁定和解锁它只有从内部-没有外部可访问的钥匙。实际上，这意味着互斥对象的所有权是一个原子操作-在获取互斥锁的过程中，没有可能有其他线程得到它，结果是你一直拥有互斥锁。在我们的房子比喻中，这是不太明显的，因为人类比计算机聪明太多（smarter than ones and zeros）。</p><h2 id="数量大于1的信号量"><a href="#数量大于1的信号量" class="headerlink" title="数量大于1的信号量"></a>数量大于1的信号量</h2><p>假设我们在厨房安装了传统的钥匙锁。这个锁的工作方式是，如果你有一个钥匙，你可以打开门并进入。任何使用这个锁的人都同意，当他们进去时，他们会立即把门从里面锁起来，这样外面的人总是需要钥匙。</p><p>现在，控制我们想要多少人在厨房里-把两个钥匙挂在门外，这就变成了一件简单的事情！厨房总是锁着的。当有人想走进厨房时，他们会发现门外有一把钥匙。如果是的话，他们就带着它，打开厨房的门，进去，用钥匙锁上门。</p><p>因为进入厨房的人在厨房的时候一定要带钥匙，所以我们可以通过限制门上的钥匙的数量来直接控制进入厨房的人数。</p><p>对于线程，这就需要通过信号量来完成了。“普通”信号量就像一个互斥体一样工作-你要么拥有互斥量，在这种情况下，你可以访问资源，或者你没有，在这种情况下，你没有访问权限。我们刚才在厨房描述的信号量是一个计数信号，它保持计数的记录(线程所允许的keys数量)。</p><h2 id="互斥的信号量"><a href="#互斥的信号量" class="headerlink" title="互斥的信号量"></a>互斥的信号量</h2><p>我们只是问了一个问题“你能用一个互斥量来做吗？”关于用计数实现一个锁，答案是否定的，反过来呢？我们能用信号量作为互斥量吗？</p><p>是的。事实上，在某些操作系统中，这正是他们所做的-他们没有互斥锁，只有信号量！那么，为什么要麻烦互斥锁呢？</p><p>要回答这个问题，看看你的洗手间。你的房子的建造者是如何实现“互斥”的？我猜你没有挂在墙上的钥匙！</p><p>互斥锁（Mutexes）是一个“特殊用途”信号量。如果您希望一个线程在特定的代码段中运行，那么互斥锁是迄今为止最有效的实现。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><blockquote><p>这篇文章真的可谓是生动有趣，把线程和进程用了生活中的比喻来描述，很是深刻。原文中的描述虽然简单，但有些单词还是有些拿不准，我都打出来了，甚至有一些描述有些生硬，如有错误，请指出。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记(4)——并发基础</title>
      <link href="/2017/10/31/java-xue-xi-bi-ji-4-bing-fa-ji-chu/"/>
      <url>/2017/10/31/java-xue-xi-bi-ji-4-bing-fa-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我们使用计算机时，可以同时做许多事情，例如一边打游戏一边听音乐。这是因为操作系统支持并发任务，从而使得这些工作得以同时进行。</p><blockquote><p><strong>那么提出一个问题：</strong>如果我们要实现一个程序能一边听音乐一边玩游戏怎么实现呢？<br><img src="http://upload-images.jianshu.io/upload_images/7896890-b6c28e4f108ec11d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提出的问题"><br>我们使用了循环来模拟过程，因为播放音乐和打游戏都是连续的，但是结果却不尽人意，因为函数体总是要执行完之后才能返回。那么到底怎么解决这个问题？下面来说。</p></blockquote><h1 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h1><p>并行性和并发性是既相似又有区别的两个概念。</p><p><strong>并行性是指两个或多个事件在同一时刻发生。而并发性是指连个或多个事件在同一时间间隔内发生。</strong>在多道程序环境下，并发性是指在一段时间内宏观上有多个程序在同时运行，但在单处理机环境下（一个处理器），每一时刻却仅能有一道程序执行，故微观上这些程序只能是分时地交替执行。例如，在1秒钟时间内，0-15ms程序A运行；15-30ms程序B运行；30-45ms程序C运行；45-60ms程序D运行，<strong>因此可以说，在1秒钟时间间隔内，宏观上有四道程序在同时运行，但微观上，程序A、B、C、D是分时地交替执行的。</strong></p><p>如果在计算机系统中有多个处理机，这些可以并发执行的程序就可以被分配到多个处理机上，实现并发执行，即利用每个处理机爱处理一个可并发执行的程序。这样，多个程序便可以同时执行。<strong>以此就能提高系统中的资源利用率，增加系统的吞吐量。</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-1fce0d8c98910442.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="并发和并行"></p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p><strong>进程是指一个内存中运行的应用程序。</strong>一个应用程序可以同时启动多个进程，那么上面的问题就有了解决的思路：<strong>我们启动两个进程，一个用来打游戏，一个用来播放音乐。</strong>这当然是一种解决方案，但是想象一下，如果一个应用程序需要执行的任务非常多，<em>例如LOL游戏吧，光是需要播放的音乐就有非常多，人物本身的语音，技能的音效，游戏的背景音乐，塔攻击的声音等等等，还不用说游戏本身，就光播放音乐就需要创建许多许多的进程，</em>而进程本身是一种非常消耗资源的东西，这样的设计显然是不合理的。更何况大多数的操作系统都不需要一个进程访问其他进程的内存空间，<strong>也就是说，进程之间的通信很不方便，此时我们就得引入“线程”这门技术，来解决这个问题。</strong></p><p><strong>线程是指进程中的一个执行任务（控制单元），一个进程可以同时并发运行多个线程。</strong>打开我们的任务管理器，在【查看】里面点击【选择列】，有一个线程数的勾选项，找到并勾选，可以看到：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-072d37a7ca6863d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="任务管理器"></p><h2 id="进程和线程的区别："><a href="#进程和线程的区别：" class="headerlink" title="进程和线程的区别："></a>进程和线程的区别：</h2><p><strong>进程：</strong>有独立的内存空间，进程中的数据存放空间（堆空间和栈空间）是独立的，至少有一个线程。</p><p><strong>线程：</strong>堆空间是共享的，栈空间是独立的，线程消耗的资源也比进程小，相互之间可以影响的，又称为轻型进程或进程元。</p><p>因为一个进程中的多个线程是并发运行的，那么从微观角度上考虑也是有先后顺序的，那么<strong>哪个线程执行完全取决于CPU调度器(JVM来调度)</strong>，程序员是控制不了的。我们可以把多线程并发性看作是多个线程在瞬间抢CPU资源，谁抢到资源谁就运行，这也造就了<strong>多线程的随机性。</strong>下面我们将看到更生动的例子。</p><p><strong>Java程序的进程(Java的一个程序运行在系统中)里至少包含主线程和垃圾回收线程(后台线程)：</strong></p><blockquote><p>你可以简单的这样认为，但实际上有四个线程（了解就好）：<br>[1] main——main线程，用户程序入口<br>[2] Reference Handler——清除Reference的线程<br>[3] Finalizer——调用对象finalize方法的线程<br>[4] Signal Dispatcher——分发处理发送给JVM信号的线程     </p></blockquote><h2 id="多线程的优势："><a href="#多线程的优势：" class="headerlink" title="多线程的优势："></a>多线程的优势：</h2><p>尽管面临很多挑战，多线程有一些优点使得它一直被使用。这些优点是：</p><ul><li><strong>资源利用率更好</strong></li><li><strong>程序设计在某些情况下更简单</strong></li><li><strong>程序响应更快</strong></li></ul><h3 id="（1）资源利用率更好"><a href="#（1）资源利用率更好" class="headerlink" title="（1）资源利用率更好"></a>（1）资源利用率更好</h3><p>想象一下，一个应用程序需要从本地文件系统中读取和处理文件的情景。比方说，从磁盘读取一个文件需要5秒，处理一个文件需要2秒。处理两个文件则需要：</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token operator">|</span> <span class="token number">5</span>秒读取文件A<span class="token number">2</span><span class="token operator">|</span> <span class="token number">2</span>秒处理文件A<span class="token number">3</span><span class="token operator">|</span> <span class="token number">5</span>秒读取文件B<span class="token number">4</span><span class="token operator">|</span> <span class="token number">2</span>秒处理文件B<span class="token number">5</span><span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">|</span> 总共需要<span class="token number">14</span>秒</code></pre><p>从磁盘中读取文件的时候，大部分的CPU时间用于等待磁盘去读取数据。在这段时间里，CPU非常的空闲。它可以做一些别的事情。通过改变操作的顺序，就能够更好的使用CPU资源。看下面的顺序：</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token operator">|</span> <span class="token number">5</span>秒读取文件A<span class="token number">2</span><span class="token operator">|</span> <span class="token number">5</span>秒读取文件B <span class="token operator">+</span> <span class="token number">2</span>秒处理文件A<span class="token number">3</span><span class="token operator">|</span> <span class="token number">2</span>秒处理文件B<span class="token number">4</span><span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">|</span> 总共需要<span class="token number">12</span>秒</code></pre><p>CPU等待第一个文件被读取完。然后开始读取第二个文件。当第二文件在被读取的时候，CPU会去处理第一个文件。记住，在等待磁盘读取文件的时候，CPU大部分时间是空闲的。</p><p><strong>总的说来，CPU能够在等待IO的时候做一些其他的事情。</strong>这个不一定就是磁盘IO。它也可以是网络的IO，或者用户输入。通常情况下，网络和磁盘的IO比CPU和内存的IO慢的多。</p><h3 id="（2）程序设计更简单"><a href="#（2）程序设计更简单" class="headerlink" title="（2）程序设计更简单"></a>（2）程序设计更简单</h3><p>在单线程应用程序中，如果你想编写程序手动处理上面所提到的读取和处理的顺序，你必须记录每个文件读取和处理的状态。相反，你可以启动两个线程，每个线程处理一个文件的读取和操作。线程会在等待磁盘读取文件的过程中被阻塞。在等待的时候，其他的线程能够使用CPU去处理已经读取完的文件。其结果就是，磁盘总是在繁忙地读取不同的文件到内存中。这会带来磁盘和CPU利用率的提升。而且每个线程只需要记录一个文件，因此这种方式也很容易编程实现。</p><h3 id="（3）程序响应更快"><a href="#（3）程序响应更快" class="headerlink" title="（3）程序响应更快"></a>（3）程序响应更快</h3><p>有时我们会编写一些较为复杂的代码（这里的复杂不是说复杂的算法，而是复杂的业务逻辑），例如，一笔订单的创建，它包括插入订单数据、生成订单赶快找、发送邮件通知卖家和记录货品销售数量等。用户从单击“订购”按钮开始，就要等待这些操作全部完成才能看到订购成功的结果。但是这么多业务操作，如何能够让其更快地完成呢？</p><p>在上面的场景中，可以使用多线程技术，即将数据一致性不强的操作派发给其他线程处理（也可以使用消息队列），如生成订单快照、发送邮件等。<strong>这样做的好处是响应用户请求的线程能够尽可能快地处理完成，缩短了响应时间，提升了用户体验。</strong></p><h4 id="多线程的还有一些优势也显而易见："><a href="#多线程的还有一些优势也显而易见：" class="headerlink" title="多线程的还有一些优势也显而易见："></a>多线程的还有一些优势也显而易见：</h4><blockquote><ul><li>①  进程之前不能共享内存，而线程之间共享内存(堆内存)则很简单。</li><li>② 系统创建进程时需要为该进程重新分配系统资源,创建线程则代价小很多,因此实现多任务并发时,多线程效率更高.</li><li>③ Java语言本身内置多线程功能的支持,而不是单纯第作为底层系统的调度方式,从而简化了多线程编程.</li></ul></blockquote><h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>即使是单核处理器也支持多线程执行代码，CPU通过给每个线程分配CPU时间片来实现这个机制。时间片是CPU分配给各个线程的时间，因为时间片非常短，所以CPU通过不停地切换线程执行，让我们感觉多个线程是同时执行的，时间片一般是几十毫秒（ms）。</p><p>CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务的时候，可以再加载这个任务的状态。<strong>所以任务从保存到再加载的过程就是一次上下文切换。</strong></p><blockquote><p>这就像我们同时读两本书，当我们在读一本英文的技术书时，发现某个单词不认识，于是打开中英文字典，但是在放下英文技术书之前，大脑必须先记住这本书独到了多少页的多少行，等查完单词之后，能够继续读这本书。这样的切换是会影响读书效率的，同样上下文切换也会影响多线程的执行速度。</p></blockquote><h2 id="创建线程的两种方式"><a href="#创建线程的两种方式" class="headerlink" title="创建线程的两种方式"></a>创建线程的两种方式</h2><h3 id="继承Thead类："><a href="#继承Thead类：" class="headerlink" title="继承Thead类："></a>继承Thead类：</h3><p><img src="http://upload-images.jianshu.io/upload_images/7896890-a8667d8f1d94e5b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="继承Thread类"></p><p>运行结果发现打游戏和播放音乐交替出现，说明已经成功了。</p><h3 id="实现Runnable接口："><a href="#实现Runnable接口：" class="headerlink" title="实现Runnable接口："></a>实现Runnable接口：</h3><p><img src="http://upload-images.jianshu.io/upload_images/7896890-66383da0574a934f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实现Runnable接口"><br>也能完成效果。</p><p>以上就是传统的两种创建线程的方式，事实上还有第三种，我们后边再讲。</p><h2 id="多线程一定快吗？"><a href="#多线程一定快吗？" class="headerlink" title="多线程一定快吗？"></a>多线程一定快吗？</h2><p>先来一段代码，通过并行和串行来分别执行累加操作，分析：下面的代码并发执行一定比串行执行快吗？</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-5e780c2fde5128e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多线程一定快吗？"></p><p>以下是我测试的结果，可以看出，当不超过1百万的时候，并行是明显比串行要慢的，为什么并发执行的速度会比串行慢呢？这是因为线程有创建和上下文切换的开销。</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-833820aebe7e9445.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试结果"></p><h2 id="继承Thread类还是实现Runnable接口？"><a href="#继承Thread类还是实现Runnable接口？" class="headerlink" title="继承Thread类还是实现Runnable接口？"></a>继承Thread类还是实现Runnable接口？</h2><h3 id="吃苹果比赛"><a href="#吃苹果比赛" class="headerlink" title="吃苹果比赛"></a>吃苹果比赛</h3><p>想象一个这样的例子：给出一共50个苹果，让三个同学一起来吃，并且给苹果编上号码，让他们吃的时候顺便要说出苹果的编号：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-1bec6d919415871c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="吃苹果比赛"></p><p>运行结果可以看到，使用继承方式实现，每一个线程都吃了50个苹果。<strong>这样的结果显而易见：是因为显式地创建了三个不同的Person对象，而每个对象在堆空间中有独立的区域来保存定义好的50个苹果。</strong></p><p>而使用实现方式则满足要求，<strong>这是因为三个线程共享了同一个Apple对象，而对象中的num数量是一定的。</strong></p><blockquote><p>所以可以简单总结出继承方式和实现方式的区别：<br><img src="http://upload-images.jianshu.io/upload_images/7896890-f0793fe663aa2754.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="两种方式的区别"></p></blockquote><p>对于这两种方式哪种好并没有一个确定的答案，它们都能满足要求。就我个人意见，我更倾向于实现Runnable接口这种方法。因为线程池可以有效的管理实现了Runnable接口的线程，如果线程池满了，新的线程就会排队等候执行，直到线程池空闲出来为止。而如果线程是通过实现Thread子类实现的，这将会复杂一些。</p><p>有时我们要同时融合实现Runnable接口和Thread子类两种方式。<strong>例如，实现了Thread子类的实例可以执行多个实现了Runnable接口的线程。一个典型的应用就是线程池。</strong></p><h3 id="常见的错误：调用run-方法而非start-方法"><a href="#常见的错误：调用run-方法而非start-方法" class="headerlink" title="常见的错误：调用run()方法而非start()方法"></a>常见的错误：调用run()方法而非start()方法</h3><p>创建并运行一个线程所犯的常见错误是调用线程的run()方法而非start()方法，如下所示：</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token operator">|</span> Thread newThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token function">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">|</span> newThread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//should be start();</span></code></pre><p>起初你并不会感觉到有什么不妥，因为run()方法的确如你所愿的被调用了。但是，事实上,<strong>run()方法并非是由刚创建的新线程所执行的，而是被创建新线程的当前线程所执行了。</strong>也就是被执行上面两行代码的线程所执行的。想要让创建的新线程执行run()方法，必须调用新线程的start方法。</p><h2 id="吃苹果比赛的问题：线程不安全问题"><a href="#吃苹果比赛的问题：线程不安全问题" class="headerlink" title="吃苹果比赛的问题：线程不安全问题"></a>吃苹果比赛的问题：线程不安全问题</h2><p>尽管，Java并不保证线程的顺序执行，具有随机性，但吃苹果比赛的案例运行多次也并没有发现什么太大的问题。这并不是因为程序没有问题，而只是问题出现的不够明显，为了让问题更加明显，我们使用Thread.sleep()方法（经常用来模拟网络延迟）来让线程休息10ms，让其他线程去抢资源。<strong>（注意：在程序中并不是使用Thread.sleep(10)之后,程序才出现问题,而是使用之后,问题更明显.）</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-36d8665713e7af89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="吃苹果比赛中的问题"></p><p><strong>为什么会出现这样的错误呢？</strong></p><p>先来分析第一种错误：为什么会吃重复的苹果呢？就拿B和C都吃了编号为47的苹果为例吧：</p><blockquote><ul><li>① A线程拿到了编号为48的苹果，打印输出然后让num减1，睡眠10ms，此时num为47。</li><li>② 这时B和C同时都拿到了编号为47的苹果，打印输出，在其中一个线程作出了减一操作的时候，A线程从睡眠中醒过来，拿到了编号为46的苹果，然后输出。在这期间并没有任何操作不允许B和C线程不能拿到同一个编号的苹果，之前没有明显的错误仅仅可能只是因为运行速度太快了。</li></ul></blockquote><p>再来分析第二种错误：照理来说只应该存在1-50编号的苹果，可是0和-1是怎么出现的呢？</p><blockquote><ul><li>① 当num=1的时候，A，B，C三个线程同时进入了try语句进行睡眠。</li><li>② C线程先醒过来，输出了编号为1的苹果，然后让num减一，当C线程醒过来的时候发现num为0了。</li><li>③ A线程醒过来一看，0都没有了，只有-1了。</li></ul></blockquote><p><strong>归根结底是因为没有任何操作来限制线程来获取相同的资源并对他们进行操作，这就造成了线程安全性问题。</strong></p><blockquote><p>如果我们把打印和减一的操作分成两个步骤，会更加明显：<br><img src="http://upload-images.jianshu.io/upload_images/7896890-70ac6aba006c7adf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拆成两个步骤"><br>ABC三个线程同时打印了50的苹果，然后同时做出减一操作。</p></blockquote><p><strong>像这样的原子操作，是不允许分步骤进行的，必须保证同步进行，不然可能会引发不可设想的后果。</strong></p><p>要解决上述多线程并发访问一个资源的安全性问题，就需要<strong>引入线程同步</strong>的概念。</p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>多个执行线程共享一个资源的情景，是最常见的并发编程情景之一。为了解决访问共享资源错误或数据不一致的问题，人们引入了临界区的概念：<strong>用以访问共享资源的代码块，这个代码块在同一时间内只允许一个线程执行。</strong></p><p>为了帮助编程人员实现这个临界区，Java（以及大多数编程语言）提供了同步机制，当一个线程试图访问一个临界区时，它将使用一种同步机制来查看是不是已经有其他线程进入临界区。如果没有其他线程进入临界区，他就可以进入临界区。如果已经有线程进入了临界区，它就被同步机制挂起，直到进入的线程离开这个临界区。如果在等待进入临界区的线程不止一个，JVM会选择其中的一个，其余的将继续等待。</p><h3 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h3><p>如果一个对象已用synchronized关键字声明，那么只有一个执行线程被允许访问它。使用<strong>synchronized</strong>的好处显而易见：保证了多线程并发访问时的同步操作，避免线程的安全性问题。但是坏处是：<strong>使用synchronized的方法/代码块的性能比不用要低一些。所以好的做法是：尽量减小synchronized的作用域。</strong></p><blockquote><p>我们还是先来解决吃苹果的问题，考虑一下synchronized关键字应该加在哪里呢？<br><img src="http://upload-images.jianshu.io/upload_images/7896890-35c4ba08104cd881.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="synchronized应放在哪里？"><br>发现如果还再把synchronized关键字加在if里面的话，0和-1又会出来了。这其实是因为当ABC同是进入到if语句中，等待临界区释放的时，拿到1编号的线程已经又把num减一操作了，而此时最后一个等待临界区的进程拿到的就会是-1了。</p></blockquote><h3 id="同步锁（Lock）"><a href="#同步锁（Lock）" class="headerlink" title="同步锁（Lock）"></a>同步锁（Lock）</h3><p>Lock机制提供了比synchronized代码块和synchronized方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大,更体现面向对象。</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-09f6539ee1859746.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="摘自JDK1.6中文版说明的代码"></p><blockquote><p>参考资料：</p><ul><li><a href="http://study.163.com/course/courseMain.htm?courseId=1003108028" target="_blank" rel="noopener">http://study.163.com/course/courseMain.htm?courseId=1003108028</a> 《Java零基础入门教程》</li><li>《Java并发编程的艺术》</li><li>《Java 7并发编程实战手册》</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记(3)——String类详解</title>
      <link href="/2017/10/25/java-xue-xi-bi-ji-3-string-lei-xiang-jie/"/>
      <url>/2017/10/25/java-xue-xi-bi-ji-3-string-lei-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>因为没有成功地为IDEA配上反编译工具，所以自己下载了一个XJad工具，背景是白色的，所以忍着强迫症硬是把IDEA的主体也给换成白色了，感觉为了这篇文章付出了诸多啊….</p></blockquote><h1 id="字符串简介"><a href="#字符串简介" class="headerlink" title="字符串简介"></a>字符串简介</h1><p>《Thinging in Java》中有一句话：<strong>可以证明，字符串操作是计算机程序设计中最常见的行为。</strong></p><p>把多个字符按照一定的顺序排列起来，就叫字符串（就像羊肉串一样，串起来的），具体是怎么排列的，你可以跟进String的源代码去看一下，会发现它其实内部维护的是一个char类型的数组：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-036e64ee9ee2051c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="String类内部维护的是一个char数组"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 也就是说</span>String str <span class="token operator">=</span> <span class="token string">"ABCD"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 定义一个字符串对象，其实等价于：</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="字符串的分类"><a href="#字符串的分类" class="headerlink" title="字符串的分类"></a>字符串的分类</h2><p>其实说起来会有些别扭，为什么字符串会有分类这种东西。了解的朋友可能会知道字符串的操作除了String，还有StringBuffer和StringBuilder（区别我们在下面来说）</p><h2 id="不可变的字符串"><a href="#不可变的字符串" class="headerlink" title="不可变的字符串"></a>不可变的字符串</h2><p>String是一个奇葩。</p><p><strong>String对象不可变，也就是说当对象创建完毕之后，该对象的内容（字符序列）是不允许改变的，如果内容改变则会创建一个新的String对象，返回到原地址中。</strong></p><p>细心的朋友也许会发现，String类维护的char数组不仅被final所修饰，并且查看JDK源码你就会发现，<strong>String类中每一个看起来会修改String值得方法，实际上都是创建了一个全新的String对象，以包含修改后的字符串对象。</strong>而最初的String对象则丝毫未动。我们可以简单的来看一个实例（从替换操作中就能明显看出）：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-02c6c109b166f52d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="String类中的replace方法"></p><blockquote><p>replace方法就是替换字符串中的内容，如果替换之后跟原来的字符串相同则返回this，如果不相同则new一个新的对象返回。这明显体现了内容改变则返回新对象而不是直接修改String对象的值。</p></blockquote><h2 id="表面的错觉"><a href="#表面的错觉" class="headerlink" title="表面的错觉"></a>表面的错觉</h2><p>关于String对象是否可变，有些操作确实会给人错觉，先来看一段程序：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-2644ac6bf600a649.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一个例子"></p><p>从结果来看，s1的值最初是“A”，经过赋值以后，变成了“C”,经过字符串连接运算并赋值以后，变成了“BC”。String对象的内容真的改变了吗？<strong>实际上，这只是错觉而已。</strong>有疑惑的朋友可以去看我的上一篇笔记，你就能知道：</p><p><strong>String对象“A”，“B”，“C”在全程中都没有任何改变，改变的只是引用s1所指向的内容，也就是s1的值。</strong></p><h2 id="String对象的创建"><a href="#String对象的创建" class="headerlink" title="String对象的创建"></a>String对象的创建</h2><p>有两种方式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第一种：直接赋一个字面量</span>String str1 <span class="token operator">=</span> <span class="token string">"ABCD"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第二种：通过构造器创建</span>String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"ABCD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么这两种方式有什么不同呢？这里可能会涉及到一个面试题：</p><blockquote><p>上述的两种方法分别创建了几个String对象？</p></blockquote><p>回答这个问题也特别简单，首先你需要直到JVM的内存模型是怎样的，在上一篇笔记中也有简单提到，这里需要补充的是：<strong>常量池（专门存储常量的地方，都指的是方法区中）分为编译常量池（不研究，存储字节码的相关信息）和运行常量池（存储常量数据）。</strong></p><blockquote><p>先来看一张结果图：<br><img src="http://upload-images.jianshu.io/upload_images/7896890-e4659bc6656d9d6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果图"></p></blockquote><ul><li>当执行第一句话的时候，会在常量池中添加一个新的ABCD字符，str1指向常量池的ABCD</li><li>当执行第二句话的时候，因为有new操作符，所以会在堆空间新开辟一块空间用来存储新的String对象，因为此时常量池中已经有了ABCD字符，所以堆中的String对象指向常量池中的ABCD，而str2则指向堆空间中的String对象。</li></ul><blockquote><p>所以结论：<br><strong>String str1 = “ABCD”;</strong><br>最多创建一个String对象,最少不创建String对象.如果常量池中,存在”ABCD”,那么str1直接引用,此时不创建String对象.否则,先在常量池先创建”ABCD”内存空间,再引用.<br><strong>String str2 = new String(“ABCD”);</strong><br>最多创建两个String对象，至少创建一个String对象。new关键字绝对会在堆空间创建一块新的内存区域，所以至少创建一个String对象。</p></blockquote><h2 id="String对象的空值"><a href="#String对象的空值" class="headerlink" title="String对象的空值"></a>String对象的空值</h2><p>一种是表示引用为空（null）的空值：</p><pre class=" language-java"><code class="language-java">String str1 <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 没有初始化，没有分配内存空间</span></code></pre><p>另外一种表示内容为空的空值：</p><pre class=" language-java"><code class="language-java">String str2 <span class="token operator">=</span> "<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 分配有内存空间，有内容。</span></code></pre><blockquote><p>所以当你需要判断字符串是否为空的时候，实际上应该这样：<br><img src="http://upload-images.jianshu.io/upload_images/7896890-514016865e382497.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="判断字符串非空"></p></blockquote><h2 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h2><p><img src="http://upload-images.jianshu.io/upload_images/7896890-6ba349f9c811b3a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字符串的比较"></p><p>从上图可以明显看出，<strong>使用“==”，只能比较引用的内存地址是否相同，而使用“equals”方法，则比较的是字符串的内容。</strong></p><blockquote><p>我们可以跟到String类的equals方法：<br><img src="http://upload-images.jianshu.io/upload_images/7896890-dc520a0855cdaf2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="String类的equals方法"></p></blockquote><h3 id="“-”号是怎么来连接字符串的"><a href="#“-”号是怎么来连接字符串的" class="headerlink" title="“+”号是怎么来连接字符串的"></a>“+”号是怎么来连接字符串的</h3><p>先来直接看一个简单的例子，程序中创建了三个String对象，str是hello和wrold两个字符串连接赋值后的对象，程序的结果很明显，但我们关心的是，hello和world是怎样连接起来的呢？</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-885c895308af612b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="先来看一个例子"></p><p>我们在XJad（Java反编译程序，把生成的class反编译成java）中打开刚刚生成的class文件会发现：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-736f29f79984abc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="反编译的结果"></p><p>编译器自动引入了一个<strong>java.lang.StringBuilder</strong>类。虽然我们在源代码中并没有使用StringBuilder类，但是编译器却自作主张地使用了它，因为它更高效。</p><p>在这个例子中，编译器创建了一个<strong>StringBuilde</strong>对象，用以构造最终的<strong>String</strong>，并为每个字符串调用了一次<strong>StringBuilder</strong>的<strong>append()</strong>方法，总计两次。最后调用<strong>toString()</strong>生成结果。这是编译器自动优化的结果，包括自动生成的Tester()无参数默认的构造函数也是。</p><p>现在，你也许会觉得可以随意使用<strong>String</strong>对象，反正编译器会为你自动地优化性能。可是在这之前，我们先要看看编译器究竟能给我们优化到什么程度（下面再详细介绍StringBuilder）。</p><h3 id="可变的字符串"><a href="#可变的字符串" class="headerlink" title="可变的字符串"></a>可变的字符串</h3><p><strong>StringBuilder/StringBuffer：</strong>当对象创建完毕之后，该对象的内容可以发生改变，当内容发生改变的时候，对象保持不变。</p><p>接着上面的问题，我们继续来看一个例子：</p><blockquote><p><img src="http://upload-images.jianshu.io/upload_images/7896890-2431fab5600e3952.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="程序和程序的结果"><br>程序的结果显而易见，我们来看看反编译之后的代码：<br><img src="http://upload-images.jianshu.io/upload_images/7896890-056c471c0b3a3f6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="反编译之后的代码"><br>可以看到，对比两个对象，后者的循环部分的代码更简短、更简单，而且它只生成了一个<strong>StringBuilder</strong>对象。</p></blockquote><p><strong>结论是：如果字符串操作比较简单，那就可以信赖编译器，它会为你合理地构造最终的字符串结果。但如果你还使用循环，多次地改变字符串的内容，那就更适合StringBuilder对象。</strong></p><p>但是如果你想要走捷径，例如<strong>append(a+”:”+c)，</strong>则编译器就会调入陷阱，从而为你另外创建一个<strong>StringBuilder</strong>对象处理括号内的字符串操作。</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-a9ca5459d4a64468.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译器陷阱"></p><h3 id="String对象的比较"><a href="#String对象的比较" class="headerlink" title="String对象的比较"></a>String对象的比较</h3><p><strong>StringBuilder</strong>是Java SE5引入的，在这之前Java用的是<strong>StringBuffer</strong>。后者线程安全（只需要了解，该对象方法中所有的方法都是用了<strong>synchronized</strong>修饰符），因此开销也会大。有没有用<strong>synchronized</strong>修饰符，就是这两者唯一的区别。我们可以简单地来比较一下这三个String对象在拼接字符串中的性能：</p><blockquote><p>创建好三个方法，分别测试三个类型的对象的拼接效率：<br><img src="http://upload-images.jianshu.io/upload_images/7896890-15ef1480ca9fbd62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试拼接效率"><br><img src="http://upload-images.jianshu.io/upload_images/7896890-31e967f832ee92ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最后在main方法中测试"></p></blockquote><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>最后再有一个String的面试题：</p><blockquote><p><strong>说说下面的String对象，彼此之间是否相等？</strong><br><img src="http://upload-images.jianshu.io/upload_images/7896890-f1adb2146cdb6116.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="面试题"></p></blockquote><p>如果你自己写几个判断相等的语句，分别判断str1和另外五个是否相等，则会发现：<br><strong>str1和str2/str3相等，和另外几个都不相等。</strong>我们先来看一下反编译之后的代码：</p><blockquote><p><img src="http://upload-images.jianshu.io/upload_images/7896890-6ebaa00780d60fd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译之后的代码（存在编译优化）"></p></blockquote><p>知识点（纯干货）：</p><ul><li>单独使用””引号创建的字符串都是直接量,编译期就已经确定存储到常量池中；</li><li>使用new String(“”)创建的对象会存储到堆内存中,是运行期才创建；</li><li>使用只包含直接量的字符串连接符如”aa” + “bb”创建的也是直接量编译期就能确定,已经确定存储到常量池中(str2和str3)；</li><li>使用包含String直接量(无final修饰符)的字符串表达式(如”aa” + s1)创建的对象是运行期才创建的,存储在堆中；</li><li>通过变量/调用方法去连接字符串,都只能在运行时期才能确定变量的值和方法的返回值,不存在编译优化操作.</li></ul><h1 id="文章结尾"><a href="#文章结尾" class="headerlink" title="文章结尾"></a>文章结尾</h1><p>其实还想写关于正则表达的东西的，还是改天找时间另外研究研究写一篇像样的吧。关于String的操作，就简单给一下图吧，感兴趣也可以自己百度或者跟踪进源代码里面去看，这里就不细说了：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-c749c80d3b904c5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="String类中常用的方法"></p><blockquote><p>参考资料：</p><ul><li><a href="http://study.163.com/course/courseMain.htm?courseId=1003108028" target="_blank" rel="noopener">http://study.163.com/course/courseMain.htm?courseId=1003108028</a> 《Java零基础入门教程》</li><li>《Thinking in Java》第四版</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记(2)——数据类型</title>
      <link href="/2017/09/19/java-xue-xi-bi-ji-2-shu-ju-lei-xing/"/>
      <url>/2017/09/19/java-xue-xi-bi-ji-2-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>终于要写点干货了，其实思考了很久下面一篇文章要写什么，主要的纠结点在于，既想要分享那些精美的知识，又怕这些知识不太好嚼。后来想想还是对初学者不太好友算了..一来这系列文章叫做学习笔记，我的。另外写得足够有料，才能发挥笔记的作用，不然索然无味的，连收藏、喜欢的意义也没有了。</p></blockquote><h1 id="写在文章之前"><a href="#写在文章之前" class="headerlink" title="写在文章之前"></a>写在文章之前</h1><p>终于写点干货了，想先简单谈谈自己的一些看法。对于我自己而言，我比较厌烦那些繁琐的无聊的知识点，反而更在乎一些实际应用的东西。但了解一些底层的东西是非常有意义的，它有助于我们理解程序。</p><blockquote><p>每一点知识的积累，终会有用武之地。也许，它会使您在面试过程中正确地回答一道面试题；也许，它会让您更加清楚Java底层的实现方式；也许，它能让您在学业上感到更加充实…（以上摘自梁勇著的Java深入解析_前言）</p></blockquote><h1 id="Java中的数据类型"><a href="#Java中的数据类型" class="headerlink" title="Java中的数据类型"></a>Java中的数据类型</h1><p>Java是一种强类型的语言。这意味着必须为每一个变量都声明一种类型。</p><p>在Java中，你可以把数据类型分为两部分，一部分<strong>是基本类型（primitive type）</strong>：4种整形、2种浮点类型、1种用于表示Unicode编码的字符单元的字符类型char和1种用于表示真值的boolean类型。</p><p>另外一部分是<strong>引用类型（reference type）</strong>，如String和List。每个基本类型都有一个对应的引用类型，称作装箱基本类型（boxed primitive）。装箱基本类中对应于int、double、boolean的是Integer、Double和Boolean。</p><h2 id="Java中的特例"><a href="#Java中的特例" class="headerlink" title="Java中的特例"></a>Java中的特例</h2><p>Java是一种完全面向对象的语言，从理论上来说，在Java中应该不存在对象以外的事务，即所有的类型都是对象。然而，在Java8中的8种基本数据类型不是对象，之所以这样设计，是因为相对于对象来说，基本数据在使用上更加方便，并且在效率上也高于对象类型。所以这就需要去了解一下Java中创建对象的过程。</p><h2 id="创建对象的过程"><a href="#创建对象的过程" class="headerlink" title="创建对象的过程"></a>创建对象的过程</h2><blockquote><p>当程序运行时，对象是怎么进行安排放置的呢？特别是内存是怎样分配的呢？</p></blockquote><p>Java大体上会把内存分为四块区域：堆、栈、静态区、常量区。</p><ul><li><strong>堆</strong> ： 位于RAM中，用于存放所有的java对象。</li><li><strong>栈</strong> ： 位于RAM中，引用就存在于栈中。</li><li><strong>静态区</strong>: 位于RAM中，被static修饰符修饰的变量会被放在这里</li><li><strong>常量区</strong>：位于ROM中， 很明显，放常量的。（其实常量通常直接存放在程序代码的内部，因为这样非常安全，因为它们永远都不会被改变）</li></ul><p>所以当我们创建对象，例如实例化一个Person类：</p><pre class=" language-java"><code class="language-java">Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>首先，会在堆中开辟一块空间存放这个新来的Person对象。然后，会创建一个引用p，存放在栈中，这个引用p指向Person对象（事实上是，p的值就是Person对象的内存地址）。</p><p>这样，我们通过访问p，然后得到了Person的内存地址，进而找到了Person对象。</p><p>然后又有了这样一句代码：</p><pre class=" language-java"><code class="language-java">Person p2 <span class="token operator">=</span> p<span class="token punctuation">;</span></code></pre><p>这句代码的含义是：</p><p>创建了一个新的引用p2，保存在栈中，引用的地址也指向Person的地址。这个时候，你通过p2来改变Person对象的状态，也会改变p的结果。因为它们指向同一个对象。（String除外，之后会专门讲String）</p><p>此时，内存中是这样的：</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-3a3740af2c4def76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="内存的状态"></p><p>有一个很通俗的方式来讲解引用和对象。大家对于快捷方式应该不会陌生吧？我们桌面的图标大部分都是快捷方式。它并不是我们安装在电脑上的应用的可执行文件（不是.exe文件)，那么为什么点击它可以打开应用程序呢？是因为快捷方式连接了文件，这就像是引用和对象的关系了。</p><p>我们不直接对文件进行操作，而是通过快捷方式来进行操作。快捷方式不能独立存在，同样，引用也不能独立存在（你可以只创建一个引用，但是当你要使用它的时候必须得给它赋值，否则它将毫无用处）。</p><p>一个文件可以有多个快捷方式，同样一个对象也可以有多个引用。而一个引用只能同时对应一个对象。</p><blockquote><p>在java里，“=”不能被看成是一个赋值语句，它不是在把一个对象赋给另外一个对象，它的执行过程实质上是将右边对象的地址传给了左边的引用，使得左边的引用指向了右边的对象。java表面上看起来没有指针，但它的引用其实质就是一个指针。在java里，“=”语句不应该被翻译成赋值语句，因为它所执行的确实不是一个简单的赋值过程，而是一个传地址的过程，被译成赋值语句会造成很多误解，译得不准确。</p></blockquote><h2 id="特例：基本数据类型"><a href="#特例：基本数据类型" class="headerlink" title="特例：基本数据类型"></a>特例：基本数据类型</h2><p>为什么要有特例呢？是因为new将对象存储在“堆”里，一是用new创建一个对象——特别是小的，简单的变量<strong>（Java中数据定长，为了可移植性）</strong>往往不是很明智而且有效的方法，二是因为“堆”空间本来就有限，如果频繁的操作会导致不可想象的错误，并且别忘了<a href="http://www.jianshu.com/p/e0ba0863f2f1" target="_blank" rel="noopener">第一篇文章</a>里面提到的，Java的设计初衷是什么。</p><p>所以针对这些类型，Java采取了与C和C++相同的方法，也就是说，不用new来创建变量，二是创建一个并非是引用的“自动”变量。这个变量直接存储“值”并置于常量区中，因此更加高效。</p><p>先来看一个例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>我们需要知道的是，在常量区中，相同的常量只会存在一个。当执行第一句代码时。先查找常量区中有没有2，没有，则开辟一个空间存放2，然后在栈中存入一个变量i，让i指向2；</p><p>执行第二句的时候，查找发现2已经存在了，所以就不开辟新空间了。直接在栈中保存一个新变量j，让j指向2；</p><p>当然，java堆每一个基本数据类型都提供了对应的包装类。我们依旧可以用new操作符来创建我们想要的变量。</p><pre class=" language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是，用new操作符创建的对象是不同的，也就是说，此时，i和j指向不同的内存地址。<strong>因为每次调用new操作符，都会在堆开辟新的空间。</strong></p><h2 id="深入了解Integer"><a href="#深入了解Integer" class="headerlink" title="深入了解Integer"></a>深入了解Integer</h2><p>来看一个例子：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-39d324cd6881b659.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一个例子"></p><blockquote><p>第一个返回true很好理解，就像上面讲的，a和b指向相同的地址。<br>第二个返回false是为什么呢？下面细说<br>第三个返回false是因为用了new关键字来开辟了新的空间，i和j两个对象分别指向堆区中的两块内存空间。</p></blockquote><p>我们可以跟踪一下Integer的源码，看看到底怎么回事。在IDEA中，你只需要按住Ctrl然后点击Integer，就会自动进入jar包中对应的类文件。</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-315606fedfecd838.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Integer类"></p><p>跟踪到文件的700多行，你会看到这么一段，感兴趣可以仔细读一下，不用去读也没有关系，因为你只需要知道这是Java的一个缓存机制。Integer类的内部类缓存了-128到127的所有数字。（事实上，Integer类的缓存上限是可以通过修改系统来更改的。了解就行了，不必去深究。）</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-15d2ec8f9bc63240.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="缓存机制"></p><h3 id="为什么引入缓存机制"><a href="#为什么引入缓存机制" class="headerlink" title="为什么引入缓存机制"></a>为什么引入缓存机制</h3><p>这回到了为什么引入基础类型这个特例的问题上。我们看看Java语言规范是怎么规定的：</p><blockquote><p>If the value p being boxed is an integer literal of type int between -128 and 127 inclusive (<a href="https://link.zhihu.com/?target=https%3A//docs.oracle.com/javase/specs/jls/se8/html/jls-3.html%23jls-3.10.1" target="_blank" rel="noopener">§3.10.1**</a>), or the boolean literal true or false (<a href="https://link.zhihu.com/?target=https%3A//docs.oracle.com/javase/specs/jls/se8/html/jls-3.html%23jls-3.10.3" target="_blank" rel="noopener">§3.10.3**</a>), or a character literal between ‘\u0000’ and’\u007f’ inclusive (<a href="https://link.zhihu.com/?target=https%3A//docs.oracle.com/javase/specs/jls/se8/html/jls-3.html%23jls-3.10.4" target="_blank" rel="noopener">§3.10.4**</a>), then let a and b be the results of any two boxing conversions of p. It is always the case that a == b.</p><p>Ideally, boxing a primitive value would always yield an identical reference. In practice, this may not be feasible using existing implementation techniques. The rule above is a pragmatic compromise, requiring that certain common values always be boxed into indistinguishable objects. The implementation may cache these, lazily or eagerly. <strong>For other values, the rule disallows any assumptions about the identity of the boxed values on the programmer’s part.</strong> This allows (but does not require) sharing of some or all of these references. Notice that integer literals of type long are allowed, but not required, to be shared.</p><p>This ensures that in most common cases, the behavior will be the desired one, without imposing an undue performance penalty, especially on small devices. Less memory-limited implementations might, for example, cache all char and short values, as well as int and long values in the range of -32K to +32K.</p></blockquote><p>事实上，不光是Integer这么特别，还包括boolean还有char类型。并且文章的最后提到了<strong>为了实现更少内存的可能。</strong></p><h2 id="另一个特例：String"><a href="#另一个特例：String" class="headerlink" title="另一个特例：String"></a>另一个特例：String</h2><p>String是一个特殊的类，因为它被final修饰符所修饰，是一个不可改变的类。当然，看过java源码后你会发现，基本类型的各个包装类也被final所修饰。这里以String为例。</p><p>我们来看这样一个例子：</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-1cb11559760bbad3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例子"></p><blockquote><p> 执行第一句 ： 常量区开辟空间存放“abc”，s1存放在栈中指向“abc”<br>执行第二句，s2 也指向 “abc”，<br>执行第三句，因为“abc”已经存在，所以直接指向它。<br>所以三个变量指向同一块内存地址，结果都为true。<br>当s1内容改变的时候。这个时候，常量区开辟新的空间存放“bcd”，s1指向“bcd”，而s2和s3指向“abc”所以只有s2和s3相等。</p></blockquote><p>这种情况下，s1,s2,s3都是字符串常量，类似于基本数据类型。（如果执行的是s1 = “abc”,那么结果会都是true）</p><p>我们再看一个例子：</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-530e77c58db5a82c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例子2"></p><blockquote><p>执行第一行代码： 在堆里分配空间存放String对象，在常量区开辟空间存放常量“abc”，String对象指向常量，s1指向该对象。<br>执行第二行代码：s2指向上一步new出来的string对象。<br>执行第三行代码： 在堆里分配新的空间存放String对象，新对象指向常量“abc”，s3指向该对象。<br>到这里，很明显，s1和s2指向的是同一个对象</p><p>接着就很诡异了，我们让s1 依旧= “abc”,但是结果s1和s2指向的地址不同了。</p></blockquote><p>怎么回事呢？这就是String类的特殊之处了，new出来的String不再是上面的字符串常量，而是字符串对象。</p><p>由于String类是不可改变的，所以String对象也是不可改变的，我们每次给String赋值都相当于执行了一次new String()，然后让变量指向这个新对象，而不是在原来的对象上修改。</p><p>当然，java还提供了StringBuffer类，这个是可以在原对象上做修改的。如果你需要修改原对象，那么请使用StringBuffer类。</p><h2 id="引发的问题：值传递还是引用传递？"><a href="#引发的问题：值传递还是引用传递？" class="headerlink" title="引发的问题：值传递还是引用传递？"></a>引发的问题：值传递还是引用传递？</h2><p>java是值传递还是引用传递的呢？毫无疑问，java是值传递的。那么什么又叫值传递和引用传递呢？</p><p>我们先来看一个例子：</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-cabe50a835eca720?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例子"></p><p>这是一个很经典的例子，我们希望调用了swap函数以后，a和b的值可以互换，但是事实上并没有。为什么会这样呢？</p><p>这就是因为java是值传递的。<strong>也就是说，我们在调用一个需要传递参数的函数时，传递给函数的参数并不是我们传进去的参数本身，而是它的副本。</strong>说起来比较拗口，但是其实原理很简单。我们可以这样理解：</p><p>一个有形参的函数，当别的函数调用它的时候，必须要传递数据。比如swap函数，别的函数要调用swap就必须传两个整数过来。</p><p>这个时候，有一个函数按耐不住寂寞，扔了两个整数过来，但是，swap函数有洁癖，它不喜欢用别人的东西，于是它把传过来的参数复制了一份，然后对复制的数据修修改改，而别人传过来的参数动根本没动。</p><p>所以，当swap函数执行完毕之后，交换了的数据只是swap自己复制的那一份，而原来的数据没变。</p><blockquote><p>也可以理解为别的函数把数据传递给了swap函数的形参，最后改变的只是形参而实参没变，所以不会起到任何效果。</p></blockquote><p>我们再来看一个复杂一点的例子(Person类添加了get，set方法)：</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-12da05026aed184b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例子"></p><blockquote><p>可以看到，我们把p1传进去，它并没有被替换成新的对象。因为change函数操作的不是p1这个引用本身，而是这个引用的一个副本。</p><p>你依然可以理解为，主函数将p1复制了一份然后变成了chagne函数的形参，最终指向新Person对象的是那个副本引用，而实参p1并没有改变。</p></blockquote><p>再来看一个例子：</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-27ea492babe95e92?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例子2"></p><blockquote><p>这次为什么就改变了呢？分析一下。<br>首先，new了一个Person对象，暂且叫他小明吧。然后p1指向小明。<br>小明10岁了，随着时间的推移，小明的年龄要变了，调用了一下changgeAge方法，把小明的引用传了进去。<br>传递的过程中，changgeAge也有洁癖，于是复制了一份小明的引用，这个副本也指向小明。<br>然后changgeAge通过自己的副本引用，改变了小明的年龄。<br>由于是小明这个对象被改变了，所以所有小明的引用调用方法得到的年龄都会改变<br>所以就变了。</p></blockquote><p>最后简单的总结一下。</p><p>java的传值过程，其实传的是副本，不管是变量还是引用。所以，不要期待把变量传递给一个函数来改变变量本身。</p><h2 id="“-”是怎么连接字符串的？"><a href="#“-”是怎么连接字符串的？" class="headerlink" title="“+”是怎么连接字符串的？"></a>“+”是怎么连接字符串的？</h2><blockquote><p>先抛个砖：对Java程序员来说，使用运算符“+”来连接字符串是非常普遍的，当“+”两边的操作数是String类型时（如果只有一个操作数是String类型，则系统也会将另外一个操作数转换成String类型），就会执行字符串连接的运算。但是，运算符“+”是怎样连接String对象的呢？编译器又是如何实现的呢?</p><p>之后我再来补这个内容，先发表啦。</p></blockquote><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><blockquote><p>浮点类型用于表示有小数部分的数值。在Java中有两种浮点类型，一个是4字节的float，一个是8字节的double。我们平时用来编写程序用来表示增长率、物品重量等方面也非常有用。不过，在使用浮点类型时，也需要留意一些问题。</p></blockquote><h3 id="浮点类型只是近似的存储"><a href="#浮点类型只是近似的存储" class="headerlink" title="浮点类型只是近似的存储"></a>浮点类型只是近似的存储</h3><p>请问一个问题：0.1+0.2等于多少？请不要慌着报答案，我没有开玩笑的意思，看一下Java给出的答案你就知道了：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-3d58b0edc9c4c1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Java的答案"><br>结果似乎有些令人惊讶，这么简单的算术竟然也会算错。</p><p>其实，这并不是计算错误，这只是浮点数类型存储的问题。计算机使用二进制来存储数据，而二进制无法准确的表示分数 1/10 ，就像使用十进制时，无法准确地表示 1/3 一样。</p><h3 id="数量级差很大的浮点运算"><a href="#数量级差很大的浮点运算" class="headerlink" title="数量级差很大的浮点运算"></a>数量级差很大的浮点运算</h3><p>当浮点数值的数量级相差很大的时候，运算又会有什么问题呢？</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-8234cf550c99320e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数量级很大的浮点运算"></p><p>又发生了预期外的结果。从输出结果来看，f3竟然和f4是相等的，也就是意味着对f3+1并没有改变f3的值。</p><p>这同样是因为浮点数的存储造成的，<strong>二进制所能表示的两个相邻的浮点值之间存在一定的空隙。</strong>浮点值越大，这个间隙也会越大。当浮点值大道一定程度的时，如果对浮点值的改变很小（例如上面的30000000+1），就不足以使浮点值发生改变。就好比蒸发掉大海中的一滴水，大海还是大海，几乎不存在变化。</p><blockquote><p><strong>如果想要准确的存储，就去使用BigDecimal吧，有必要了解的可以去自行百度，这里就不做过多介绍了，已经是Java封装好的类库了</strong></p></blockquote><h3 id="抛出一个有趣的问题"><a href="#抛出一个有趣的问题" class="headerlink" title="抛出一个有趣的问题"></a>抛出一个有趣的问题</h3><blockquote><p>我们知道，在Java中，long类型占用了8个字节，float类型占用了4个字节。</p></blockquote><p>照理来说，long类型的容量应该比float大许多，然而事实正好相反，float反而拥有比8字节long类型更大的取值范围。这同样是因为浮点数的存储格式造成的。有兴趣的可以去自行百度了解。</p><blockquote><p>参考资料：<br><a href="http://www.jianshu.com/p/39753aad9a38" target="_blank" rel="noopener">http://www.jianshu.com/p/39753aad9a38</a> ，原文作者:CleverFan<br>《Java深入解析》——梁勇著<br>《Effective Java》——第二版<br>《Java核心技术 卷I》——第九版<br>《Java编程思想》——第四版</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记(1)——搭建好所需要的环境</title>
      <link href="/2017/09/18/java-xue-xi-bi-ji-1-da-jian-hao-suo-xu-yao-de-huan-jing/"/>
      <url>/2017/09/18/java-xue-xi-bi-ji-1-da-jian-hao-suo-xu-yao-de-huan-jing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：后来仔细思考了一下，从零开始学习Java的系列标题略长（实际改过来的也不短），并且不能正确反映写文的目的，所以决定从这一篇开始改为Java学习笔记。之前的一篇文章在一觉醒来以后也觉得有些不太好还有一些需要添加的地方，所以后来这一个系列是时刻更新的东西，用笔记来命名再好不过了。</p></blockquote><h1 id="搭建好我们需要的环境"><a href="#搭建好我们需要的环境" class="headerlink" title="搭建好我们需要的环境"></a>搭建好我们需要的环境</h1><p>在搭建环境之前，我们需要先来了解以下下面的这些名词：</p><table><thead><tr><th align="left">术语名</th><th align="left">缩写</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">Java Development Kit</td><td align="left">JDK</td><td align="left">编写Java程序的从程序员使用的软件</td></tr><tr><td align="left">Java Runtime Environment</td><td align="left">JRE</td><td align="left">运行Java程序的用户使用的软件</td></tr><tr><td align="left">Standard Edition</td><td align="left">SE</td><td align="left">用于桌面或简单的服务器应用的Java平台</td></tr><tr><td align="left">Enterprise Edition</td><td align="left">EE</td><td align="left">用于复杂的服务器应用的Java平台</td></tr><tr><td align="left">Micro Edition</td><td align="left">ME</td><td align="left">用于手机和其他小型设备的Java平台</td></tr><tr><td align="left">Java 2</td><td align="left">J2</td><td align="left">一个过时的术语，用于描述1998年~2006年之间的Java版本</td></tr><tr><td align="left">Software Development Kit</td><td align="left">SDK</td><td align="left">一个过时的术语，用于描述1998年~2006年之间的JDK</td></tr><tr><td align="left">Update</td><td align="left">u</td><td align="left">Oracle的术语，用于发布修改的bug</td></tr><tr><td align="left">NetBeans</td><td align="left">—</td><td align="left">Oracle的集成开发环境</td></tr></tbody></table><p>安装Java除了相关的集成开发环境IDE(Integrated Development Environment )，还需要下载好能支撑Java运行的JDK。这里有一个有趣的故事是：支撑Java运行的这么一个文件，这么一个系统，恰恰呢就是Java语言本身编写的。</p><p>所以先下好JDK，官网这里：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p>进去以后点击JDK进入，然后点击Accept License Agreement，然后根据自己的系统下载不同的JDK就可以。</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-8c7819af5cc660f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载JDK"></p><h1 id="关于Eclipse还是IDEA"><a href="#关于Eclipse还是IDEA" class="headerlink" title="关于Eclipse还是IDEA"></a>关于Eclipse还是IDEA</h1><p>我个人还是比较推荐IDEA吧，从安装软件的大小上面就能看出明显的差别…</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-6b3aff09d1902553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDEA和Eclipse的安装包大小比较"></p><p>但也不是那么绝对，IDEA据说是一把双刃剑，我现在没有明显得感受过，但是刚打开这个软件的时候，就略微有一点卡，是因为IDEA本身的检错差错功能十分强大，几乎是实时查错，反正我是一用就爱上了，放上几张图你们感受下：</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-a05896506ce7f619?imageMogr2/auto-orient/strip" alt></p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-036e4e881f11c8a9?imageMogr2/auto-orient/strip" alt></p><p>关于IDEA的弊端其实自己想也能想得到，当项目达到一定程度的时候，它自身的强大的纠错功能，会让系统变得卡顿起来，还有就是它太强大了，开过车的人都不会像要走路，大概就是一样。<br>具体的优点在下面列出，这里推荐两篇<a href="http://www.jianshu.com/u/8dc5811b228f" target="_blank" rel="noopener">CleverFan</a>的文章：</p><ul><li><a href="http://www.jianshu.com/p/0e2bf6a1efda" target="_blank" rel="noopener">IDEA入门级教程——你怎么还在用Eclipse？</a></li><li><a href="http://www.jianshu.com/p/3160ff832a9b" target="_blank" rel="noopener">IDEA(jetbrain通用)优雅级使用教程</a></li></ul><p>关于IDEA的安装教程网上一搜一大堆..这里不再赘述..</p><h2 id="IDEA的简单介绍及设置"><a href="#IDEA的简单介绍及设置" class="headerlink" title="IDEA的简单介绍及设置"></a>IDEA的简单介绍及设置</h2><p>IDEA的社区版是免费的，我还一直在想着该怎么破解…毕竟这小几百美刀一年的价格对于我这样的平民窟铁头娃来说，实在不太友好，结果用了半天…半点提示没有…</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-70ab9c8984c31e1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="免费的IDEA"></p><blockquote><p>据说IDEA的使用量已经超过Eclipse很久了，那么什么让IDEA这么受欢迎呢？下面摘了一些上面外链文章的精华还有一些来自于百度的精华，来说说最智能的IDE：IDEA。</p></blockquote><h3 id="智能提示重构代码"><a href="#智能提示重构代码" class="headerlink" title="智能提示重构代码"></a>智能提示重构代码</h3><p>如果你写的代码过于复杂，或者有更好的方式来替代你写的代码，那么IDEA会给你一个提示，告诉你还可以有更好的方式。如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-c29af62c10285f92?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="智能提示重构代码"></p><p>我们学java的时候学过增强的for循环，其实它的学名叫做foreach语句，上面的代码我使用了普通的for循环，IDEA告诉我，使用foreach语句更好。</p><h3 id="更友好的代码提示功能"><a href="#更友好的代码提示功能" class="headerlink" title="更友好的代码提示功能"></a>更友好的代码提示功能</h3><p>使用eclipse的都应该清楚，如果你想要输入StringBuffer，那么你必须得按着顺序输入，直接输sb是不行的，但是在IDEA里你可以这样输入。</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-de086f83d1d6689a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码提示功能"></p><p>不仅如此，看下一个例子</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-d7a11cd502368d21?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码提示功能"></p><p>还可以这样提示。这些只是一些很简单的例子，但是已经足够强大了。</p><h3 id="什么叫智能？"><a href="#什么叫智能？" class="headerlink" title="什么叫智能？"></a>什么叫智能？</h3><p>上面的其实都是很基础的功能，IDEA正真智能的 地方在于它会不断的分析你的代码，并且智能的进行反馈。我们 再看一个简单的例子。</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-f59dd5088f822622?imageMogr2/auto-orient/strip" alt="智能分析你的代码"></p><p>这是一个普通的structs程序。在配置文件里定义了一个action并设置了两种不同的返回值。打开我们的action，我们可以看到，你可以直接从代码的左侧找到跳转到对应配置文件的快捷按钮。如果你的某一个方法是覆盖了父类方法，那么你也可以直接查看父类方法。更人性化的是，IDEA可以分析出你的action方法可以跳转到哪些界面？你是不是也有点心动了呢？</p><h3 id="强大的纠错能力"><a href="#强大的纠错能力" class="headerlink" title="强大的纠错能力"></a>强大的纠错能力</h3><p>我们总是会犯一些低级错误，比如一不留神打错一个字母，可能找了好久都找不到错误所在，IDEA的纠错能力也许可以帮到你，再看一个例子。</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-e0b69aae977c345d?imageMogr2/auto-orient/strip" alt="纠错功能"></p><p>我们只创建了两个jsp，当你的返回值中出现了你没创建的文件时，IDEA会提示错误，这样就可以避免你因为写错单词而造成的错误。</p><blockquote><p>以上内容均转自上文外链第一篇文章。原文作者：CleverFan</p></blockquote><h2 id="配置IDEA"><a href="#配置IDEA" class="headerlink" title="配置IDEA"></a>配置IDEA</h2><blockquote><p>我只讲一些非常实用的配置，还有一些常用的快捷键。另外我在安装过程中遇到有搜狗输入法卡在IDEA界面的情况，升级搜狗输入法8.6之后完美解决。如果一开始的字体太小，你可以直接按住Ctrl滚动鼠标的滚轮来调节字体大小哦。</p></blockquote><p>你可以在File菜单下找到Setting，或者直接按下快捷键【Ctrl+Alt+S】</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-af879c70ac837665.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置界面"></p><p>学习编程一定养成习惯不要去装什么中文包，强行让自己习惯英文的界面，我有直观的感受是，现在看这些个菜单或者去Java官方查一些API函数都比较得心应手。</p><h3 id="设置自动导入包"><a href="#设置自动导入包" class="headerlink" title="设置自动导入包"></a>设置自动导入包</h3><p><img src="http://upload-images.jianshu.io/upload_images/4047674-e09fee78cd6cccc4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置自动导入包"></p><p>如上图标注 1 和 2 所示，默认 IntelliJ IDEA 是没有开启自动 import 包的功能。</p><ul><li>勾选标注 1 选项，IntelliJ IDEA 将在我们书写代码的时候自动帮我们优化导入的包，比如自动去掉一些没有用到的包。</li><li>勾选标注 2 选项，IntelliJ IDEA 将在我们书写代码的时候自动帮我们导入需要用到的包。但是对于那些同名的包，还是需要手动Alt + Enter 进行导入的，IntelliJ IDEA 目前还无法智能到替我们做判断。</li></ul><h3 id="实时代码模板（Live-Templates）"><a href="#实时代码模板（Live-Templates）" class="headerlink" title="实时代码模板（Live Templates）"></a>实时代码模板（Live Templates）</h3><p>看以下的图：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-757fc7e0dd3a2be6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实时代码模板"></p><p>当我们输入psvm按下Enter会自动创建man函数（事实上也可以通过输入main然后按下【Ctrl+J】智能提示功能来创建），然后输入sout按下Enter就会自动创建好System.out.println(“”);这么一句。同时这么赞的功能还允许用户自己定义自己的模板，具体的设置在这里：</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-49a89dd512025844?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实时代码模板的功能"></p><p>这里创建了自己的一个模板，叫做syso，代码在下面，感兴趣的自己去研究下：</p><blockquote><p>System.out.println(“$val$的值是：—“+ $val$ + “，当前方法=$CLASS_NAME$.$METHOD_NAME$()”);$END$</p><ul><li>$VAR1$、$CLASS_NAME$、$METHOD_NAME$ 都为自己定义的变量名。设置变量名只要用两个 $ 包住即可。</li><li>每个变量在代码输出的时候都是一次光标位置，光标跳动顺序从左到右，每次跳动按 Enter。</li><li>$END$，表示最后都编辑完后光标所处的位置</li><li>$SELECTION$，表示设置环绕实时代码模板，环绕功能下面会模板专门进行介绍。</li><li>除了两个特例，其他被$包裹的都是自定义变量</li></ul></blockquote><p>这里有Jetbrains的官网介绍：<a href="https://www.jetbrains.com/help/idea/live-template-abbreviation.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/idea/live-template-abbreviation.html</a><br>有兴趣的可以去了解一下，变量也可以这样定义哦。</p><h3 id="文件代码模板"><a href="#文件代码模板" class="headerlink" title="文件代码模板"></a>文件代码模板</h3><p>这个我想大家都知道吧，你每次新建一个文件的时候，总会有一些已经存在的代码或者文字，这个就是文件代码模板。</p><p>DEA 默认新建类自带的类注释格式一般不够友好或是规范，所以我们一般需要自己根据喜好或者一些要求设置。</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-223aa072de89697e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件代码模板"></p><p>先看一个例子：</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-71dc2016b5a9ca3c?imageMogr2/auto-orient/strip" alt="例子"></p><p>只需要如下设置就可以了：</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-0205528fb0e843b4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置"></p><p>这样就可以每次在新建类的时候都能自动生成平时看代码时候别人写在开头那种屌屌的说明了。建议的格式如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-85e3d8b0d5117989.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="建议的格式"></p><h3 id="Postfix-Completion"><a href="#Postfix-Completion" class="headerlink" title="Postfix Completion"></a>Postfix Completion</h3><p>先看一个例子：</p><p><img src="http://upload-images.jianshu.io/upload_images/4047674-66907337080348b6?imageMogr2/auto-orient/strip" alt="例子"></p><p>怎么设置的呢？在设置的地方官方也给了相应的gif动图的演示，非常友好，大家可以自己去看一下。</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-d5ce046e8fb3a6ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Postfix Completion设置"></p><p>简单举几个例子好了：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-6bfac873c17b397e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拼图有点丑，别介"></p><h3 id="一些快捷键"><a href="#一些快捷键" class="headerlink" title="一些快捷键"></a>一些快捷键</h3><p>【Ctrl + D】复制当前行到下一行<br>【Ctrl + C】复制当前行<br>【Ctrl + V】粘贴到当前行<br>【Ctrl + / 】注释或取消注释当前行<br>【Ctrl + Shift + Enter】这个功能特别棒，对于强迫症患者来说特别受用，大概是这样：（你们自己具体感受下）</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-e621905cbbbf8be6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自动结束代码并排版添加分号？"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记(0)——了解Java</title>
      <link href="/2017/09/17/java-xue-xi-bi-ji-0-liao-jie-java/"/>
      <url>/2017/09/17/java-xue-xi-bi-ji-0-liao-jie-java/</url>
      
        <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/7896890-96efb4ed8490f736.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文 / 我没有三颗心脏"></p><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><blockquote><p>这里是一些关于写文的原因，目的和其他的有的没的，跟Java没有一点关系，如果是想要学习干货的童鞋可以直接跳过。</p></blockquote><p>系列文章最开始的名字是：从零开始学习Java，一来是觉得太长了（改了之后也不短），另外一个一觉醒来觉得好像这个名字不能准确反映自己写文的目的，并且我发现要把一些概念解释得特别清楚给没有编程基础的人看，对我来说是很有难度的一件事情，所以决定把名字改了，笔记是可以改的，就像今天突然想起这一篇有些东西还需要添加就来改了，这也是我喜欢的并乐意做的事情，share。——17.9.18更新</p><h2 id="写文的几个原因："><a href="#写文的几个原因：" class="headerlink" title="写文的几个原因："></a>写文的几个原因：</h2><p>这学期笔者也开了Java的课，上的第一节课老师说：教材，你们花两个星期大概看一下就可以扔了。有些同学当笑话听了，有些同学不以为然，而我当真了，我真的把郑莉著的教材《Java语言程序设计》（第2版）“看了一遍”，还不到两个星期，当然其中有一些问题没有去深究，比如数据库还有线程的东西，因为老师说的后面一句话我也认真听了：可以申请不来上课。所以就着笔者c++微薄的基础拉完了一遍教材，很是粗糙，想要重新学习一下，这是一个原因。</p><p>昨晚看到简书上的一位博主：<a href="http://www.jianshu.com/u/8dc5811b228f" target="_blank" rel="noopener">CleverFan</a>。他写下的重新认识Java系列，很是受用，本来保持得很好的生物钟，也因为看到他的文章，硬是看到了接近2点，（在此推荐一下）也由此也产生了写文的冲动，这也是一个原因。</p><p>今天去看了一下关于Java方面比较权威的两本儿书，一本《Thinking in Java》、《Java核心技术 卷Ⅰ》，觉得写得特别棒，也产生了一些自己的想法，想要分享。</p><h2 id="写文的目的："><a href="#写文的目的：" class="headerlink" title="写文的目的："></a>写文的目的：</h2><p>首先需要说的是笔者是一名学渣渣。我也是正在学习，<strong>写文更多的目的是在于交流想法，分享学习成果，也是给自己增加一些积累。</strong>还有就是觉得有些教材讲得太生涩难懂，这一点也是我看CleverFan的博文想到的，希望自己能通过一些更加好玩的方式写出来。也希望文章有什么问题能够及时反馈给我。</p><h2 id="关于更新："><a href="#关于更新：" class="headerlink" title="关于更新："></a>关于更新：</h2><p>因为个人性格的原因，我总是希望能把一件事情做得很好，所以如果有很久没有更新的情况，那就当我正在努力想怎么写文吧…hhh</p><p>我会尽可能快的更新文章，也尽可能用通俗易懂的方式说明，会把读者大大们当成是第一次接触Java去细致的讲解，也希望读者大大们能支持我的文章，关于后期维权的东西还没有去想，所以希望如果有转载的请注明一下原文出处谢谢。</p><h1 id="正式开始之前"><a href="#正式开始之前" class="headerlink" title="正式开始之前"></a>正式开始之前</h1><p>先问自己一个问题：Java是什么？如果你的答案仅仅是停留在：是一门编程语言的话，希望看完这篇文章的你，对Java有一个更加全面深入的了解。至少在学习一门语言之前，了解一下自己要学的是什么，对吧？</p><h2 id="Java的简单描述"><a href="#Java的简单描述" class="headerlink" title="Java的简单描述"></a>Java的简单描述</h2><blockquote><p>以下大内容部分提炼自Java核心技术 卷Ⅰ 。</p></blockquote><h2 id="Java最初的设计初衷是："><a href="#Java最初的设计初衷是：" class="headerlink" title="Java最初的设计初衷是："></a>Java最初的设计初衷是：</h2><p><strong>能够用于像有线电视转换盒一类处理能力和内存都很有限，并且CPU厂商各不相同的一些消费设备上。</strong><br>然而时至今日在Java的开发者编写的白皮书中（这是Java设计者用来解释设计的初衷以及完成的情况的简短摘要），对Java的描述却是这样的：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-bfdc2ad65f565eda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="来自官方网站"></p><p>你不必全部都读一遍，笔者读来大体的感觉是：为使用者创造了一个更加容易，甚至是dead simple的面向对象的语言，并同时具有移植性好，安全，开发周期短等一系列优点，也为你在烦恼c/c++的复杂性的时候提供了一个新的选择。<strong>白皮书的描述更偏向于讲述这是一个更加简单友好的工具，Sun对Java的设计目标就是：微程序员减少复杂性。用他们的话说就是：我们关心的是，减少开发健壮代码所需的时间以及困难。</strong></p><p>事实上，Java的成功也源于其类库能够让人们轻松地完成原本有一定难度的事情。例如：联网和多线程。尽管Java对于解决传统的单机程序设计问题非常有用，但同样重要的是，它解决了在万维网（WWW）上的程序设计问题（把超文本页面转换到屏幕上的浏览器）。在白皮书的最后提到了HotJava TM Browser，这是Java开发者使用Java开发的一款用来炫耀Java的强大之处的浏览器，<strong>HotJava浏览器具有的在执行网页中内嵌代码的能力在1995年的SunWorld大会上，引发了人们延续至今的对Java的狂热追逐。</strong></p><p>Java的成功源自语言本身的一些特性，以及Sun公司的进一步研发和推广。白皮书中对于Java的11个关键术语进行了组织：</p><p><img src="http://upload-images.jianshu.io/upload_images/7896890-40c93739a353706f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="11个关键术语"></p><p>关于这一段的描述，《Java核心技术 卷Ⅰ》有有趣简单的描述，感兴趣的可以去百度一下。然而笔者认为，事实上，这些特性现在浏览一遍，心里面知道就行了，没必要去深入，也没有什么用。事实上这一篇文章都是。</p><h2 id="Java与其他语言的区别"><a href="#Java与其他语言的区别" class="headerlink" title="Java与其他语言的区别"></a>Java与其他语言的区别</h2><ul><li>Java是由c++发展而来的，因为最初开发Java的是Sun公司那一批拥有UNIX应用背景的人，Java更像是C++语法的一个“纯净”版本。这里没有头文件、指针运算（甚至指针语法，但并不代表取消了指针机制，这在后面会讲到）、结构、联合、操作符重载、虚基类等。然而，设计者并没有试图清除C++中所有不适当的特性。例如，switch语法的语法在Java中就没有改变。事实上，Java还有许多奇怪的语法，后面也会提到。</li><li>JavaScript和Java除了语法类似，名字类似 ，其他再无什么关系。JavaScript是一种在网页中使用的脚本语言，而Java则是一种强大的面向对象的语言，重点在对象和对象的接口上，而并非所使用的工具上。</li></ul><blockquote><p>面向对象设计是一种程序设计技术。用木匠打一个比方，一个“面向对象的”木匠始终关注的是所制作的椅子，第二位才是使用的工具；一个“非面向对象的”木匠首先考虑的是自己的工具。</p></blockquote><h2 id="关于Java-applet"><a href="#关于Java-applet" class="headerlink" title="关于Java applet"></a>关于Java applet</h2><p>其实很简单，网页中运行的Java程序就是applet，只不过需要一些特别的语法来说明。网页中的嵌入的applet程序就如同在网页中嵌入了一副图片，不同的是，这幅图片能够对于用户的操作作出响应，改变外观、传递数据等。关于这方面可以做一些相关的了解，但笔者并不打算深入研究这方面的东西。</p><h2 id="了解面向对象"><a href="#了解面向对象" class="headerlink" title="了解面向对象"></a>了解面向对象</h2><p>所有的编程语言都提供抽象的机制。就像汇编语言是对于底层机器的轻微抽象。接着出现了所谓的“命令式”语言（如FORTRAN、BASIC、C等）都是对汇编语言的抽象。这些语言在汇编语言的基础上有了大幅的改进，但是它们所作的主要抽象仍要求在解决问题的时候要基于计算机的结构，而不是基于所要解决问题的结构来考虑。程序员必须建立起在机器模型和实际待解问题之间的模型的联系。而建立这种映射是费力的，这不是属于编程语言的固有的功能，这使得程序难以编写，并且维护代价高昂。</p><p>面向对象的方式通过向程序员提供表示问题空间中的元素的工具而更进一步。那么什么是面向对象呢？<strong>所谓对象，其实就是抽象化的数据本身。</strong>万物皆是对象，一只狗，一个人，一栋建筑，而这些对象拥有他们自己的一些行为，比如狗要吃饭，要跑，把这些称为属于狗的方法，然后把用一个叫做“类”的东西来打包（封装）好狗这个对象还有属于它的方法，也就是数据和功能。这就是面向对象，<strong>它的本质就是：程序可以通过添加新类型的对象使自身适用于某个特定的问题。</strong>仅此而已。</p><blockquote><p>写在文章的最后：整篇文章读了好几遍，最开始本来是打算把整一段《Java核心技术 卷Ⅰ》关于Java简史的东西贴出来的，但发现好像用处并不会很大，只有增加篇幅的作用。文章的大部分内容来自于上文提到的两部经典教材，第一次写文，希望喜欢的多多支持，有什么不足也能及时提出，谢谢。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
